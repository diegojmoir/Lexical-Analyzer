/* The following code was generated by JFlex 1.6.1 */

package Lexical_Analyzer;

import java_cup.runtime.*;
import java.util.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Diego Pérez Moir/Desktop/Lexical-Analyzer/src/Lexical_Analyzer/Lexer.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\101\1\27\1\36\1\36\1\6\22\0\1\101\1\46\1\25"+
    "\1\31\1\0\1\52\1\32\1\0\1\51\1\26\1\7\1\24\1\42"+
    "\1\35\1\22\1\5\1\2\11\1\1\0\1\41\1\43\1\44\1\45"+
    "\2\0\1\72\3\21\1\23\1\21\2\4\1\76\2\4\1\77\1\100"+
    "\1\71\1\4\1\74\1\4\1\75\5\4\1\20\2\4\1\47\1\30"+
    "\1\50\1\0\1\3\1\0\1\15\1\63\1\62\1\60\1\13\1\14"+
    "\1\40\1\64\1\57\1\4\1\70\1\16\1\65\1\61\1\56\1\66"+
    "\1\4\1\11\1\17\1\10\1\12\1\55\1\67\1\37\1\73\1\4"+
    "\1\53\1\33\1\54\1\0\6\0\1\36\32\0\1\34\23\0\1\0"+
    "\12\0\1\0\2\0\1\0\u15bd\0\1\34\u097f\0\13\34\35\0\1\36"+
    "\1\36\5\0\1\34\57\0\1\34\u0fa0\0\1\34\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\1\1\3\1\4\1\5\1\6"+
    "\5\3\1\7\1\10\1\1\1\11\1\5\1\12\2\1"+
    "\1\5\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\13\3\1\0"+
    "\1\2\2\0\1\30\3\0\1\3\1\5\1\0\1\5"+
    "\10\3\1\0\1\31\1\0\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\3\1\42\15\3\5\0"+
    "\2\2\2\3\1\0\6\3\1\43\1\3\1\31\1\3"+
    "\1\44\11\3\1\45\3\3\4\0\1\30\2\0\2\3"+
    "\1\5\1\46\1\47\1\3\1\50\2\3\1\51\4\3"+
    "\1\52\3\3\1\53\5\3\1\54\1\0\1\54\1\0"+
    "\1\30\1\54\10\3\1\55\1\56\1\57\1\60\1\3"+
    "\1\61\3\3\2\54\1\62\1\3\1\63\3\3\1\64"+
    "\3\3\1\65\1\66\1\3\1\67\6\3\1\70\1\3"+
    "\1\71\1\72\2\3\1\73\1\3\1\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[212];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\102\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\102"+
    "\0\u039c\0\u035a\0\u03de\0\102\0\u0420\0\u0462\0\u035a\0\u035a"+
    "\0\102\0\102\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac\0\102"+
    "\0\u05ee\0\102\0\102\0\102\0\u0630\0\u0672\0\u06b4\0\u06f6"+
    "\0\u0738\0\u077a\0\u07bc\0\u07fe\0\u0840\0\u0882\0\u08c4\0\u0906"+
    "\0\u0948\0\u098a\0\u035a\0\u09cc\0\u0a0e\0\u0a50\0\u0a92\0\u0ad4"+
    "\0\u0b16\0\u0b58\0\u0b9a\0\u0bdc\0\u0c1e\0\u0c60\0\u0ca2\0\u0ce4"+
    "\0\u0d26\0\u0d68\0\u0daa\0\u039c\0\102\0\u0dec\0\102\0\102"+
    "\0\102\0\102\0\102\0\102\0\102\0\u098a\0\u0e2e\0\u0ad4"+
    "\0\u0e70\0\u0eb2\0\u0ef4\0\u0f36\0\u0f78\0\u0fba\0\u0ffc\0\u103e"+
    "\0\u1080\0\u10c2\0\u1104\0\u1146\0\u1188\0\u11ca\0\u120c\0\u124e"+
    "\0\u1290\0\u12d2\0\u0a50\0\u1314\0\u1356\0\u1398\0\u13da\0\u141c"+
    "\0\u145e\0\u14a0\0\u14e2\0\u1524\0\u1566\0\u0ad4\0\u15a8\0\u039c"+
    "\0\u15ea\0\u162c\0\u166e\0\u16b0\0\u16f2\0\u1734\0\u1776\0\u17b8"+
    "\0\u17fa\0\u183c\0\u187e\0\u18c0\0\u1902\0\u1944\0\u1986\0\u19c8"+
    "\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0\0\u1b12\0\u1ad0\0\u1b54\0\u1b96"+
    "\0\102\0\u0ad4\0\u0ad4\0\u1bd8\0\u0ad4\0\u1c1a\0\u1c5c\0\u0ad4"+
    "\0\u1c9e\0\u1ce0\0\u1d22\0\u1d64\0\u0ad4\0\u1da6\0\u1de8\0\u1e2a"+
    "\0\u0ad4\0\u1e6c\0\u1eae\0\u1ef0\0\u1f32\0\u1f74\0\102\0\u1fb6"+
    "\0\u124e\0\u1ff8\0\u203a\0\u1356\0\u207c\0\u20be\0\u2100\0\u2142"+
    "\0\u2184\0\u21c6\0\u2208\0\u224a\0\u0ad4\0\u1356\0\u0ad4\0\u0ad4"+
    "\0\u228c\0\u1356\0\u22ce\0\u2310\0\u2352\0\u098a\0\u0ad4\0\u0ad4"+
    "\0\u2394\0\u0ad4\0\u23d6\0\u2418\0\u245a\0\u0ad4\0\u249c\0\u24de"+
    "\0\u2520\0\u0ad4\0\u0ad4\0\u2562\0\u0ad4\0\u25a4\0\u25e6\0\u2628"+
    "\0\u266a\0\u26ac\0\u26ee\0\u0ad4\0\u2730\0\u0ad4\0\u0ad4\0\u2772"+
    "\0\u27b4\0\u0ad4\0\u27f6\0\u0ad4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[212];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\6\1\14\1\15\2\6\1\16\2\6"+
    "\1\17\1\6\1\20\1\21\1\22\1\23\1\2\1\24"+
    "\1\25\1\26\1\27\1\30\1\27\2\6\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\6\1\46\1\47\1\50\1\51"+
    "\1\52\3\6\1\53\1\6\1\54\2\6\1\55\1\56"+
    "\2\6\1\57\1\10\102\0\1\60\2\61\2\62\1\60"+
    "\1\63\1\60\12\62\1\64\1\62\2\60\1\62\1\63"+
    "\4\60\2\62\1\63\2\62\10\60\1\62\3\60\25\62"+
    "\1\60\2\65\2\62\1\60\1\63\1\60\10\62\1\66"+
    "\1\62\1\64\1\62\2\60\1\62\1\63\4\60\2\62"+
    "\1\63\1\66\1\62\10\60\1\62\3\60\25\62\1\60"+
    "\2\62\1\67\1\70\1\60\1\63\1\60\12\70\1\62"+
    "\1\70\2\60\1\62\1\63\4\60\2\62\1\63\2\70"+
    "\10\60\1\62\3\60\24\70\1\62\1\60\4\70\1\60"+
    "\1\63\1\60\12\70\1\62\1\70\2\60\1\62\1\63"+
    "\4\60\2\62\1\63\2\70\10\60\1\62\3\60\24\70"+
    "\1\62\5\0\1\71\1\0\1\72\72\0\1\60\4\62"+
    "\1\60\1\10\1\60\14\62\2\60\1\62\1\63\4\60"+
    "\2\62\1\63\2\62\10\60\1\62\3\60\24\62\1\73"+
    "\1\60\4\70\1\60\1\63\1\60\1\70\1\74\10\70"+
    "\1\62\1\70\2\60\1\62\1\63\4\60\2\62\1\63"+
    "\2\70\10\60\1\62\3\60\7\70\1\75\14\70\1\62"+
    "\1\60\4\70\1\60\1\63\1\60\3\70\1\76\6\70"+
    "\1\62\1\70\2\60\1\62\1\63\4\60\2\62\1\63"+
    "\2\70\10\60\1\62\3\60\24\70\1\62\1\60\4\70"+
    "\1\60\1\63\1\60\6\70\1\77\3\70\1\62\1\70"+
    "\2\60\1\62\1\63\4\60\2\62\1\63\1\100\1\70"+
    "\10\60\1\62\3\60\24\70\1\62\1\60\4\70\1\60"+
    "\1\63\1\60\5\70\1\101\4\70\1\62\1\70\2\60"+
    "\1\62\1\63\4\60\2\62\1\63\2\70\10\60\1\62"+
    "\3\60\1\70\1\102\22\70\1\62\1\60\4\70\1\60"+
    "\1\63\1\60\1\103\11\70\1\62\1\70\2\60\1\62"+
    "\1\63\4\60\2\62\1\63\2\70\10\60\1\62\3\60"+
    "\24\70\1\62\1\60\4\62\1\60\1\63\1\60\14\62"+
    "\2\60\1\62\1\63\4\60\2\62\1\63\2\62\10\60"+
    "\1\62\3\60\25\62\25\104\1\105\2\0\1\106\20\104"+
    "\1\0\30\104\1\60\4\62\1\60\1\63\1\60\14\62"+
    "\2\60\1\62\1\23\4\60\2\62\1\63\2\62\10\60"+
    "\1\62\3\60\25\62\32\0\1\107\102\0\1\110\112\0"+
    "\1\111\101\0\1\112\101\0\1\113\101\0\1\114\105\0"+
    "\1\115\31\0\1\60\4\62\1\60\1\63\1\60\14\62"+
    "\2\60\1\116\1\63\4\60\2\62\1\63\2\62\10\60"+
    "\1\62\3\60\25\62\1\60\4\70\1\60\1\63\1\60"+
    "\12\70\1\62\1\70\2\60\1\62\1\63\4\60\2\62"+
    "\1\63\2\70\10\60\1\62\3\60\1\70\1\117\22\70"+
    "\1\62\1\60\4\70\1\60\1\63\1\60\4\70\1\120"+
    "\5\70\1\62\1\70\2\60\1\62\1\63\4\60\2\62"+
    "\1\63\2\70\10\60\1\62\3\60\4\70\1\121\3\70"+
    "\1\122\13\70\1\62\1\60\4\70\1\60\1\63\1\60"+
    "\12\70\1\62\1\70\2\60\1\62\1\63\4\60\2\62"+
    "\1\63\2\70\10\60\1\62\3\60\1\70\1\123\22\70"+
    "\1\62\1\60\4\70\1\60\1\63\1\60\2\70\1\124"+
    "\7\70\1\62\1\70\2\60\1\62\1\63\4\60\2\62"+
    "\1\63\2\70\10\60\1\62\3\60\24\70\1\62\1\60"+
    "\4\70\1\60\1\63\1\60\6\70\1\125\3\70\1\62"+
    "\1\70\2\60\1\62\1\63\4\60\2\62\1\63\2\70"+
    "\10\60\1\62\3\60\1\70\1\126\22\70\1\62\1\60"+
    "\4\70\1\60\1\63\1\60\1\70\1\127\10\70\1\62"+
    "\1\70\2\60\1\62\1\63\4\60\2\62\1\63\2\70"+
    "\10\60\1\62\3\60\1\70\1\130\22\70\1\62\1\60"+
    "\4\70\1\60\1\63\1\60\12\70\1\62\1\70\2\60"+
    "\1\62\1\63\4\60\2\62\1\63\2\70\10\60\1\62"+
    "\3\60\7\70\1\131\14\70\1\62\1\60\4\70\1\60"+
    "\1\63\1\60\3\70\1\132\6\70\1\62\1\70\2\60"+
    "\1\62\1\63\4\60\2\62\1\63\2\70\10\60\1\62"+
    "\3\60\24\70\1\62\1\60\4\70\1\60\1\63\1\60"+
    "\1\70\1\133\10\70\1\62\1\70\2\60\1\62\1\63"+
    "\4\60\2\62\1\63\2\70\10\60\1\62\3\60\24\70"+
    "\1\62\1\60\4\70\1\60\1\63\1\60\3\70\1\134"+
    "\6\70\1\62\1\70\2\60\1\62\1\63\4\60\2\62"+
    "\1\63\2\70\10\60\1\62\3\60\24\70\1\62\1\60"+
    "\4\70\1\60\1\63\1\60\5\70\1\135\4\70\1\62"+
    "\1\70\2\60\1\62\1\63\4\60\2\62\1\63\2\70"+
    "\10\60\1\62\3\60\24\70\1\62\10\0\1\136\3\0"+
    "\1\137\65\0\1\60\2\61\2\62\1\60\1\63\1\60"+
    "\1\140\3\62\1\141\5\62\1\64\1\62\2\60\1\62"+
    "\1\63\4\60\2\62\1\63\2\62\10\60\1\62\3\60"+
    "\25\62\1\60\4\62\1\60\1\63\1\60\1\140\3\62"+
    "\1\141\7\62\2\60\1\62\1\63\4\60\2\62\1\63"+
    "\2\62\10\60\1\62\3\60\25\62\1\60\2\64\2\62"+
    "\1\60\1\63\1\60\1\140\2\62\1\142\1\141\6\62"+
    "\1\142\2\60\1\62\1\63\4\60\2\62\1\63\2\62"+
    "\10\60\1\62\3\60\25\62\1\60\2\65\2\62\1\60"+
    "\1\63\1\60\1\140\3\62\1\141\5\62\1\64\1\62"+
    "\2\60\1\62\1\63\4\60\2\62\1\63\2\62\10\60"+
    "\1\62\3\60\25\62\1\60\4\62\1\60\1\63\1\60"+
    "\1\140\2\62\1\143\1\144\2\143\2\62\1\143\1\62"+
    "\1\143\2\60\1\62\1\63\4\60\2\62\1\63\2\62"+
    "\10\60\1\62\3\60\2\62\2\143\1\62\2\143\1\62"+
    "\1\143\4\62\1\143\7\62\1\60\2\62\1\67\1\70"+
    "\1\60\1\63\1\60\1\145\3\70\1\146\5\70\1\62"+
    "\1\70\2\60\1\62\1\63\4\60\2\62\1\63\2\70"+
    "\10\60\1\62\3\60\24\70\1\62\1\60\4\70\1\60"+
    "\1\63\1\60\1\145\3\70\1\146\5\70\1\62\1\70"+
    "\2\60\1\62\1\63\4\60\2\62\1\63\2\70\10\60"+
    "\1\62\3\60\24\70\1\62\6\71\1\0\20\71\1\0"+
    "\52\71\7\72\1\147\72\72\1\60\4\62\1\60\1\10"+
    "\1\60\1\140\3\62\1\141\7\62\2\60\1\62\1\63"+
    "\4\60\2\62\1\63\2\62\10\60\1\62\3\60\24\62"+
    "\1\73\1\60\4\70\1\60\1\63\1\60\1\145\1\70"+
    "\1\150\1\70\1\146\5\70\1\62\1\70\2\60\1\62"+
    "\1\63\4\60\2\62\1\63\2\70\10\60\1\62\3\60"+
    "\24\70\1\62\1\60\4\70\1\60\1\63\1\60\1\145"+
    "\3\70\1\146\5\70\1\62\1\70\2\60\1\62\1\63"+
    "\4\60\2\62\1\63\2\70\10\60\1\62\3\60\2\70"+
    "\1\151\21\70\1\62\1\60\4\70\1\60\1\63\1\60"+
    "\1\152\3\70\1\146\5\70\1\62\1\70\2\60\1\62"+
    "\1\63\4\60\2\62\1\63\2\70\10\60\1\62\3\60"+
    "\24\70\1\62\1\60\4\70\1\60\1\63\1\60\1\145"+
    "\3\70\1\146\2\70\1\153\2\70\1\62\1\70\2\60"+
    "\1\62\1\63\4\60\2\62\1\63\2\70\10\60\1\62"+
    "\3\60\24\70\1\62\1\60\4\70\1\60\1\63\1\60"+
    "\1\154\3\70\1\146\5\70\1\62\1\70\2\60\1\62"+
    "\1\63\4\60\2\62\1\63\2\70\10\60\1\62\3\60"+
    "\24\70\1\62\1\60\4\70\1\60\1\63\1\60\1\145"+
    "\3\70\1\146\1\70\1\155\3\70\1\62\1\70\2\60"+
    "\1\62\1\63\4\60\2\62\1\63\2\70\10\60\1\62"+
    "\3\60\24\70\1\62\1\60\4\70\1\60\1\63\1\60"+
    "\1\145\1\156\2\70\1\146\5\70\1\62\1\70\2\60"+
    "\1\62\1\63\4\60\2\62\1\63\2\70\10\60\1\62"+
    "\3\60\24\70\1\62\1\60\4\70\1\60\1\63\1\60"+
    "\1\145\1\157\2\70\1\146\5\70\1\62\1\70\2\60"+
    "\1\62\1\63\4\60\2\62\1\63\2\70\10\60\1\62"+
    "\3\60\24\70\1\62\25\104\1\160\2\0\1\106\20\104"+
    "\1\0\30\104\1\60\4\70\1\60\1\63\1\60\1\145"+
    "\3\70\1\146\5\70\1\62\1\70\2\60\1\62\1\63"+
    "\4\60\2\62\1\63\2\70\10\60\1\62\3\60\2\70"+
    "\1\161\21\70\1\62\1\60\4\70\1\60\1\63\1\60"+
    "\1\162\3\70\1\146\5\70\1\62\1\70\2\60\1\62"+
    "\1\63\4\60\2\62\1\63\2\70\10\60\1\62\3\60"+
    "\5\70\1\163\16\70\1\62\1\60\4\70\1\60\1\63"+
    "\1\60\1\145\3\70\1\146\5\70\1\62\1\70\2\60"+
    "\1\62\1\63\4\60\2\62\1\63\2\70\10\60\1\62"+
    "\3\60\11\70\1\164\12\70\1\62\1\60\4\70\1\60"+
    "\1\63\1\60\1\145\1\70\1\165\1\70\1\146\5\70"+
    "\1\62\1\70\2\60\1\62\1\63\4\60\2\62\1\63"+
    "\2\70\10\60\1\62\3\60\24\70\1\62\1\60\4\70"+
    "\1\60\1\63\1\60\1\145\3\70\1\146\1\70\1\166"+
    "\3\70\1\62\1\70\2\60\1\62\1\63\4\60\2\62"+
    "\1\63\2\70\10\60\1\62\3\60\24\70\1\62\1\60"+
    "\4\70\1\60\1\63\1\60\1\145\3\70\1\146\1\167"+
    "\4\70\1\62\1\70\2\60\1\62\1\63\4\60\2\62"+
    "\1\63\2\70\10\60\1\62\3\60\24\70\1\62\1\60"+
    "\4\70\1\60\1\63\1\60\1\145\3\70\1\146\5\70"+
    "\1\62\1\70\2\60\1\62\1\63\4\60\2\62\1\63"+
    "\2\70\10\60\1\62\3\60\4\70\1\170\17\70\1\62"+
    "\1\60\4\70\1\60\1\63\1\60\1\145\2\70\1\171"+
    "\1\146\5\70\1\62\1\70\2\60\1\62\1\63\4\60"+
    "\2\62\1\63\2\70\10\60\1\62\3\60\24\70\1\62"+
    "\1\60\4\70\1\60\1\63\1\60\1\145\3\70\1\146"+
    "\5\70\1\62\1\70\2\60\1\62\1\63\4\60\2\62"+
    "\1\63\2\70\10\60\1\62\3\60\1\70\1\172\22\70"+
    "\1\62\1\60\4\70\1\60\1\63\1\60\1\145\3\70"+
    "\1\146\5\70\1\62\1\70\2\60\1\62\1\63\4\60"+
    "\2\62\1\63\2\70\10\60\1\62\3\60\2\70\1\173"+
    "\21\70\1\62\1\60\4\70\1\60\1\63\1\60\1\145"+
    "\3\70\1\146\5\70\1\62\1\70\2\60\1\62\1\63"+
    "\4\60\2\62\1\63\2\70\10\60\1\62\3\60\12\70"+
    "\1\174\11\70\1\62\1\60\4\70\1\60\1\63\1\60"+
    "\1\145\3\70\1\146\5\70\1\62\1\70\2\60\1\62"+
    "\1\63\4\60\2\62\1\63\2\70\10\60\1\62\3\60"+
    "\2\70\1\175\21\70\1\62\1\60\4\70\1\60\1\63"+
    "\1\60\1\145\3\70\1\146\1\176\4\70\1\62\1\70"+
    "\2\60\1\62\1\63\4\60\2\62\1\63\2\70\10\60"+
    "\1\62\3\60\24\70\1\62\1\60\4\70\1\60\1\63"+
    "\1\60\1\145\3\70\1\146\1\70\1\177\3\70\1\62"+
    "\1\70\2\60\1\62\1\63\4\60\2\62\1\63\2\70"+
    "\10\60\1\62\3\60\24\70\1\62\37\0\1\200\53\0"+
    "\1\201\70\0\1\60\4\62\1\60\1\63\1\60\1\140"+
    "\3\62\1\141\7\62\2\60\1\62\1\63\4\60\2\62"+
    "\1\63\1\202\1\62\10\60\1\62\3\60\25\62\1\60"+
    "\4\62\1\60\1\63\1\60\1\140\1\203\2\62\1\141"+
    "\7\62\2\60\1\62\1\63\4\60\2\62\1\63\2\62"+
    "\10\60\1\62\3\60\25\62\1\60\2\204\2\62\1\60"+
    "\1\63\1\60\1\140\3\62\1\141\7\62\1\205\1\60"+
    "\1\62\1\63\4\60\1\62\1\206\1\63\2\62\10\60"+
    "\1\62\3\60\25\62\1\60\4\62\1\60\1\63\1\60"+
    "\1\140\1\203\1\62\1\143\1\144\2\143\2\62\1\143"+
    "\1\62\1\143\2\60\1\62\1\63\4\60\2\62\1\63"+
    "\2\62\10\60\1\62\3\60\2\62\2\143\1\62\2\143"+
    "\1\62\1\143\4\62\1\143\7\62\1\60\4\70\1\60"+
    "\1\63\1\60\1\145\3\70\1\146\5\70\1\62\1\70"+
    "\2\60\1\62\1\63\4\60\2\62\1\63\1\207\1\70"+
    "\10\60\1\62\3\60\24\70\1\62\1\60\4\70\1\60"+
    "\1\63\1\60\1\145\1\210\2\70\1\146\5\70\1\62"+
    "\1\70\2\60\1\62\1\63\4\60\2\62\1\63\2\70"+
    "\10\60\1\62\3\60\24\70\1\62\5\72\1\211\1\72"+
    "\1\147\72\72\1\60\4\70\1\60\1\63\1\60\1\145"+
    "\2\70\1\212\1\146\5\70\1\62\1\70\2\60\1\62"+
    "\1\63\4\60\2\62\1\63\2\70\10\60\1\62\3\60"+
    "\24\70\1\62\1\60\4\70\1\60\1\63\1\60\1\145"+
    "\3\70\1\146\2\70\1\213\2\70\1\62\1\70\2\60"+
    "\1\62\1\63\4\60\2\62\1\63\2\70\10\60\1\62"+
    "\3\60\24\70\1\62\1\60\4\70\1\60\1\63\1\60"+
    "\1\145\1\70\1\214\1\70\1\146\5\70\1\62\1\70"+
    "\2\60\1\62\1\63\4\60\2\62\1\63\1\207\1\70"+
    "\10\60\1\62\3\60\24\70\1\62\1\60\4\70\1\60"+
    "\1\63\1\60\1\145\2\70\1\215\1\146\5\70\1\62"+
    "\1\70\2\60\1\62\1\63\4\60\2\62\1\63\2\70"+
    "\10\60\1\62\3\60\24\70\1\62\1\60\4\70\1\60"+
    "\1\63\1\60\1\145\2\70\1\216\1\146\5\70\1\62"+
    "\1\70\2\60\1\62\1\63\4\60\2\62\1\63\1\207"+
    "\1\70\10\60\1\62\3\60\24\70\1\62\1\60\4\70"+
    "\1\60\1\63\1\60\1\145\3\70\1\146\2\70\1\150"+
    "\2\70\1\62\1\70\2\60\1\62\1\63\4\60\2\62"+
    "\1\63\2\70\10\60\1\62\3\60\24\70\1\62\1\60"+
    "\4\70\1\60\1\63\1\60\1\145\3\70\1\146\5\70"+
    "\1\62\1\70\2\60\1\62\1\63\4\60\2\62\1\63"+
    "\2\70\10\60\1\62\3\60\2\70\1\217\21\70\1\62"+
    "\1\60\4\70\1\60\1\63\1\60\1\145\3\70\1\146"+
    "\5\70\1\62\1\70\2\60\1\62\1\63\4\60\2\62"+
    "\1\63\2\70\10\60\1\62\3\60\3\70\1\220\20\70"+
    "\1\62\1\60\4\70\1\60\1\63\1\60\1\145\2\70"+
    "\1\221\1\146\5\70\1\62\1\70\2\60\1\62\1\63"+
    "\4\60\2\62\1\63\1\207\1\70\10\60\1\62\3\60"+
    "\24\70\1\62\1\60\4\70\1\60\1\63\1\60\1\145"+
    "\3\70\1\146\1\70\1\222\3\70\1\62\1\70\2\60"+
    "\1\62\1\63\4\60\2\62\1\63\2\70\10\60\1\62"+
    "\3\60\24\70\1\62\1\60\4\70\1\60\1\63\1\60"+
    "\1\145\3\70\1\146\1\70\1\223\3\70\1\62\1\70"+
    "\2\60\1\62\1\63\4\60\2\62\1\63\2\70\10\60"+
    "\1\62\3\60\24\70\1\62\1\60\4\70\1\60\1\63"+
    "\1\60\1\145\3\70\1\146\5\70\1\62\1\70\2\60"+
    "\1\62\1\63\4\60\2\62\1\63\2\70\10\60\1\62"+
    "\3\60\6\70\1\224\15\70\1\62\1\60\4\70\1\60"+
    "\1\63\1\60\1\145\3\70\1\146\1\70\1\225\3\70"+
    "\1\62\1\70\2\60\1\62\1\63\4\60\2\62\1\63"+
    "\2\70\10\60\1\62\3\60\24\70\1\62\1\60\4\70"+
    "\1\60\1\63\1\60\1\145\3\70\1\146\2\70\1\226"+
    "\2\70\1\62\1\70\2\60\1\62\1\63\4\60\2\62"+
    "\1\63\2\70\10\60\1\62\3\60\24\70\1\62\1\60"+
    "\4\70\1\60\1\63\1\60\1\145\3\70\1\146\2\70"+
    "\1\227\2\70\1\62\1\70\2\60\1\62\1\63\4\60"+
    "\2\62\1\63\2\70\10\60\1\62\3\60\24\70\1\62"+
    "\1\60\4\70\1\60\1\63\1\60\1\145\3\70\1\146"+
    "\1\230\4\70\1\62\1\70\2\60\1\62\1\63\4\60"+
    "\2\62\1\63\2\70\10\60\1\62\3\60\24\70\1\62"+
    "\1\60\4\70\1\60\1\63\1\60\1\145\3\70\1\146"+
    "\1\70\1\231\3\70\1\62\1\70\2\60\1\62\1\63"+
    "\4\60\2\62\1\63\2\70\10\60\1\62\3\60\24\70"+
    "\1\62\1\60\4\70\1\60\1\63\1\60\1\145\3\70"+
    "\1\146\1\70\1\232\3\70\1\62\1\70\2\60\1\62"+
    "\1\63\4\60\2\62\1\63\2\70\10\60\1\62\3\60"+
    "\24\70\1\62\1\60\4\70\1\60\1\63\1\60\1\145"+
    "\3\70\1\146\5\70\1\62\1\70\2\60\1\62\1\63"+
    "\4\60\2\62\1\63\2\70\10\60\1\62\3\60\15\70"+
    "\1\233\6\70\1\62\1\60\4\70\1\60\1\63\1\60"+
    "\1\145\3\70\1\146\5\70\1\62\1\70\2\60\1\62"+
    "\1\63\4\60\2\62\1\63\2\70\10\60\1\62\3\60"+
    "\4\70\1\234\17\70\1\62\1\60\4\70\1\60\1\63"+
    "\1\60\1\145\3\70\1\146\5\70\1\62\1\70\2\60"+
    "\1\62\1\63\4\60\2\62\1\63\2\70\10\60\1\62"+
    "\3\60\3\70\1\235\20\70\1\62\1\60\4\70\1\60"+
    "\1\63\1\60\1\145\3\70\1\146\1\70\1\236\3\70"+
    "\1\62\1\70\2\60\1\62\1\63\4\60\2\62\1\63"+
    "\2\70\10\60\1\62\3\60\24\70\1\62\10\0\1\237"+
    "\106\0\1\240\64\0\1\60\4\62\1\60\1\63\1\60"+
    "\1\241\3\62\1\141\7\62\2\60\1\62\1\63\4\60"+
    "\2\62\1\63\2\62\10\60\1\62\3\60\25\62\1\60"+
    "\4\62\1\60\1\63\1\60\1\140\3\62\1\141\1\242"+
    "\6\62\2\60\1\62\1\63\4\60\2\62\1\63\2\62"+
    "\10\60\1\62\3\60\25\62\1\60\2\204\2\62\1\60"+
    "\1\63\1\60\1\140\3\62\1\141\7\62\2\60\1\62"+
    "\1\63\4\60\2\62\1\63\2\62\10\60\1\62\3\60"+
    "\25\62\1\0\2\243\5\0\1\136\3\0\1\137\65\0"+
    "\1\60\4\70\1\60\1\63\1\60\1\244\3\70\1\146"+
    "\5\70\1\62\1\70\2\60\1\62\1\63\4\60\2\62"+
    "\1\63\2\70\10\60\1\62\3\60\24\70\1\62\1\60"+
    "\4\70\1\60\1\63\1\60\1\145\3\70\1\146\1\245"+
    "\4\70\1\62\1\70\2\60\1\62\1\63\4\60\2\62"+
    "\1\63\2\70\10\60\1\62\3\60\24\70\1\62\1\60"+
    "\4\70\1\60\1\63\1\60\1\145\1\246\2\70\1\146"+
    "\5\70\1\62\1\70\2\60\1\62\1\63\4\60\2\62"+
    "\1\63\2\70\10\60\1\62\3\60\24\70\1\62\1\60"+
    "\4\70\1\60\1\63\1\60\1\145\3\70\1\146\5\70"+
    "\1\62\1\70\2\60\1\62\1\63\4\60\2\62\1\63"+
    "\2\70\10\60\1\62\3\60\4\70\1\247\17\70\1\62"+
    "\1\60\4\70\1\60\1\63\1\60\1\145\3\70\1\146"+
    "\5\70\1\62\1\70\2\60\1\62\1\63\4\60\2\62"+
    "\1\63\2\70\10\60\1\62\3\60\4\70\1\250\17\70"+
    "\1\62\1\60\4\70\1\60\1\63\1\60\1\145\1\251"+
    "\2\70\1\146\5\70\1\62\1\70\2\60\1\62\1\63"+
    "\4\60\2\62\1\63\2\70\10\60\1\62\3\60\24\70"+
    "\1\62\1\60\4\70\1\60\1\63\1\60\1\145\1\70"+
    "\1\252\1\70\1\146\5\70\1\62\1\70\2\60\1\62"+
    "\1\63\4\60\2\62\1\63\2\70\10\60\1\62\3\60"+
    "\24\70\1\62\1\60\4\70\1\60\1\63\1\60\1\145"+
    "\2\70\1\253\1\146\5\70\1\62\1\70\2\60\1\62"+
    "\1\63\4\60\2\62\1\63\2\70\10\60\1\62\3\60"+
    "\24\70\1\62\1\60\4\70\1\60\1\63\1\60\1\145"+
    "\3\70\1\146\1\70\1\254\3\70\1\62\1\70\2\60"+
    "\1\62\1\63\4\60\2\62\1\63\2\70\10\60\1\62"+
    "\3\60\24\70\1\62\1\60\4\70\1\60\1\63\1\60"+
    "\1\145\3\70\1\146\2\70\1\255\2\70\1\62\1\70"+
    "\2\60\1\62\1\63\4\60\2\62\1\63\2\70\10\60"+
    "\1\62\3\60\24\70\1\62\1\60\4\70\1\60\1\63"+
    "\1\60\1\256\3\70\1\146\5\70\1\62\1\70\2\60"+
    "\1\62\1\63\4\60\2\62\1\63\2\70\10\60\1\62"+
    "\3\60\24\70\1\62\1\60\4\70\1\60\1\63\1\60"+
    "\1\145\3\70\1\146\5\70\1\62\1\70\2\60\1\62"+
    "\1\63\4\60\2\62\1\63\2\70\10\60\1\62\3\60"+
    "\13\70\1\257\10\70\1\62\1\60\4\70\1\60\1\63"+
    "\1\60\1\145\2\70\1\260\1\146\5\70\1\62\1\70"+
    "\2\60\1\62\1\63\4\60\2\62\1\63\2\70\10\60"+
    "\1\62\3\60\24\70\1\62\1\60\4\70\1\60\1\63"+
    "\1\60\1\145\1\261\2\70\1\146\5\70\1\62\1\70"+
    "\2\60\1\62\1\63\4\60\2\62\1\63\2\70\10\60"+
    "\1\62\3\60\24\70\1\62\1\60\4\70\1\60\1\63"+
    "\1\60\1\262\3\70\1\146\5\70\1\62\1\70\2\60"+
    "\1\62\1\63\4\60\2\62\1\63\2\70\10\60\1\62"+
    "\3\60\24\70\1\62\1\60\4\70\1\60\1\63\1\60"+
    "\1\145\3\70\1\146\5\70\1\62\1\70\2\60\1\62"+
    "\1\63\4\60\2\62\1\63\2\70\10\60\1\62\3\60"+
    "\21\70\1\263\1\264\1\70\1\62\1\60\4\70\1\60"+
    "\1\63\1\60\1\145\3\70\1\146\5\70\1\62\1\70"+
    "\2\60\1\62\1\63\4\60\2\62\1\63\2\70\10\60"+
    "\1\62\3\60\1\70\1\265\22\70\1\62\40\0\1\237"+
    "\41\0\1\60\4\62\1\60\1\63\1\60\1\140\3\62"+
    "\1\141\7\62\2\60\1\62\1\63\4\60\2\62\1\63"+
    "\1\62\1\266\10\60\1\62\3\60\25\62\1\0\2\243"+
    "\77\0\1\60\4\70\1\60\1\63\1\60\1\145\3\70"+
    "\1\146\5\70\1\62\1\70\2\60\1\62\1\63\4\60"+
    "\2\62\1\63\1\70\1\267\10\60\1\62\3\60\24\70"+
    "\1\62\1\60\4\70\1\60\1\63\1\60\1\145\3\70"+
    "\1\146\5\70\1\62\1\70\2\60\1\62\1\63\4\60"+
    "\2\62\1\63\2\70\10\60\1\62\3\60\4\70\1\270"+
    "\17\70\1\62\1\60\4\70\1\60\1\63\1\60\1\145"+
    "\3\70\1\146\5\70\1\62\1\70\2\60\1\62\1\63"+
    "\4\60\2\62\1\63\2\70\10\60\1\62\3\60\3\70"+
    "\1\271\20\70\1\62\1\60\4\70\1\60\1\63\1\60"+
    "\1\145\3\70\1\146\5\70\1\62\1\70\2\60\1\62"+
    "\1\63\4\60\2\62\1\63\1\70\1\272\10\60\1\62"+
    "\3\60\24\70\1\62\1\60\4\70\1\60\1\63\1\60"+
    "\1\145\3\70\1\273\5\70\1\62\1\70\2\60\1\62"+
    "\1\63\4\60\2\62\1\63\2\70\10\60\1\62\3\60"+
    "\24\70\1\62\1\60\4\70\1\60\1\63\1\60\1\145"+
    "\3\70\1\146\5\70\1\62\1\70\2\60\1\62\1\63"+
    "\4\60\2\62\1\63\2\70\10\60\1\62\3\60\3\70"+
    "\1\274\20\70\1\62\1\60\4\70\1\60\1\63\1\60"+
    "\1\145\3\70\1\146\5\70\1\62\1\70\2\60\1\62"+
    "\1\63\4\60\2\62\1\63\2\70\10\60\1\62\3\60"+
    "\10\70\1\275\13\70\1\62\1\60\4\70\1\60\1\63"+
    "\1\60\1\145\2\70\1\276\1\146\5\70\1\62\1\70"+
    "\2\60\1\62\1\63\4\60\2\62\1\63\2\70\10\60"+
    "\1\62\3\60\24\70\1\62\1\60\4\70\1\60\1\63"+
    "\1\60\1\145\1\277\2\70\1\146\5\70\1\62\1\70"+
    "\2\60\1\62\1\63\4\60\2\62\1\63\2\70\10\60"+
    "\1\62\3\60\24\70\1\62\1\60\4\70\1\60\1\63"+
    "\1\60\1\145\3\70\1\146\5\70\1\62\1\70\2\60"+
    "\1\62\1\63\4\60\2\62\1\63\2\70\10\60\1\62"+
    "\3\60\4\70\1\300\17\70\1\62\1\60\4\70\1\60"+
    "\1\63\1\60\1\145\3\70\1\146\5\70\1\62\1\70"+
    "\2\60\1\62\1\63\4\60\2\62\1\63\2\70\10\60"+
    "\1\62\3\60\2\70\1\301\21\70\1\62\1\60\4\70"+
    "\1\60\1\63\1\60\1\145\3\70\1\146\5\70\1\62"+
    "\1\70\2\60\1\62\1\63\4\60\2\62\1\63\2\70"+
    "\10\60\1\62\3\60\5\70\1\302\16\70\1\62\1\60"+
    "\4\70\1\60\1\63\1\60\1\145\3\70\1\146\2\70"+
    "\1\303\2\70\1\62\1\70\2\60\1\62\1\63\4\60"+
    "\2\62\1\63\2\70\10\60\1\62\3\60\24\70\1\62"+
    "\1\60\4\70\1\60\1\63\1\60\1\145\1\210\2\70"+
    "\1\146\1\304\4\70\1\62\1\70\2\60\1\62\1\63"+
    "\4\60\2\62\1\63\2\70\10\60\1\62\3\60\24\70"+
    "\1\62\1\60\4\70\1\60\1\63\1\60\1\145\2\70"+
    "\1\305\1\146\5\70\1\62\1\70\2\60\1\62\1\63"+
    "\4\60\2\62\1\63\2\70\10\60\1\62\3\60\24\70"+
    "\1\62\1\60\4\70\1\60\1\63\1\60\1\145\2\70"+
    "\1\306\1\146\5\70\1\62\1\70\2\60\1\62\1\63"+
    "\4\60\2\62\1\63\2\70\10\60\1\62\3\60\24\70"+
    "\1\62\1\60\4\70\1\60\1\63\1\60\1\145\3\70"+
    "\1\146\1\307\4\70\1\62\1\70\2\60\1\62\1\63"+
    "\4\60\2\62\1\63\2\70\10\60\1\62\3\60\24\70"+
    "\1\62\1\60\4\70\1\60\1\63\1\60\1\310\3\70"+
    "\1\146\5\70\1\62\1\70\2\60\1\62\1\63\4\60"+
    "\2\62\1\63\2\70\10\60\1\62\3\60\24\70\1\62"+
    "\1\60\4\70\1\60\1\63\1\60\1\145\3\70\1\146"+
    "\5\70\1\62\1\70\2\60\1\62\1\63\4\60\2\62"+
    "\1\63\2\70\10\60\1\62\3\60\4\70\1\311\17\70"+
    "\1\62\1\60\4\70\1\60\1\63\1\60\1\145\3\70"+
    "\1\146\5\70\1\62\1\70\2\60\1\62\1\63\4\60"+
    "\2\62\1\63\2\70\10\60\1\62\3\60\5\70\1\312"+
    "\16\70\1\62\1\60\4\70\1\60\1\63\1\60\1\145"+
    "\3\70\1\146\5\70\1\62\1\70\2\60\1\62\1\63"+
    "\4\60\2\62\1\63\2\70\10\60\1\62\3\60\4\70"+
    "\1\313\17\70\1\62\1\60\4\70\1\60\1\63\1\60"+
    "\1\145\3\70\1\146\5\70\1\62\1\70\2\60\1\62"+
    "\1\63\4\60\2\62\1\63\2\70\10\60\1\62\3\60"+
    "\16\70\1\314\5\70\1\62\1\60\4\70\1\60\1\63"+
    "\1\60\1\145\2\70\1\315\1\146\5\70\1\62\1\70"+
    "\2\60\1\62\1\63\4\60\2\62\1\63\1\207\1\70"+
    "\10\60\1\62\3\60\24\70\1\62\1\60\4\70\1\60"+
    "\1\63\1\60\1\145\2\70\1\316\1\146\5\70\1\62"+
    "\1\70\2\60\1\62\1\63\4\60\2\62\1\63\2\70"+
    "\10\60\1\62\3\60\24\70\1\62\1\60\4\70\1\60"+
    "\1\63\1\60\1\145\2\70\1\317\1\146\5\70\1\62"+
    "\1\70\2\60\1\62\1\63\4\60\2\62\1\63\2\70"+
    "\10\60\1\62\3\60\24\70\1\62\1\60\4\70\1\60"+
    "\1\63\1\60\1\320\3\70\1\146\5\70\1\62\1\70"+
    "\2\60\1\62\1\63\4\60\2\62\1\63\2\70\10\60"+
    "\1\62\3\60\24\70\1\62\1\60\4\70\1\60\1\63"+
    "\1\60\1\145\3\70\1\146\5\70\1\62\1\70\2\60"+
    "\1\62\1\63\4\60\2\62\1\63\1\70\1\321\10\60"+
    "\1\62\3\60\24\70\1\62\1\60\4\70\1\60\1\63"+
    "\1\60\1\145\3\70\1\146\2\70\1\322\2\70\1\62"+
    "\1\70\2\60\1\62\1\63\4\60\2\62\1\63\1\207"+
    "\1\70\10\60\1\62\3\60\24\70\1\62\1\60\4\70"+
    "\1\60\1\63\1\60\1\145\2\70\1\323\1\146\5\70"+
    "\1\62\1\70\2\60\1\62\1\63\4\60\2\62\1\63"+
    "\2\70\10\60\1\62\3\60\24\70\1\62\1\60\4\70"+
    "\1\60\1\63\1\60\1\145\1\324\2\70\1\146\5\70"+
    "\1\62\1\70\2\60\1\62\1\63\4\60\2\62\1\63"+
    "\2\70\10\60\1\62\3\60\24\70\1\62";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10296];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\1\11\6\1\1\11\3\1\1\11"+
    "\4\1\2\11\5\1\1\11\1\1\3\11\13\1\1\0"+
    "\1\1\2\0\1\1\3\0\2\1\1\0\11\1\1\0"+
    "\1\11\1\0\7\11\20\1\5\0\4\1\1\0\30\1"+
    "\4\0\1\1\2\0\2\1\1\11\25\1\1\11\1\0"+
    "\1\1\1\0\62\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[212];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	public int numLErr = 0;
	private Symbol symbol(int type, int row, int col){
		return new Symbol(type, row, col, yytext());	
	}
	
    private Symbol symbol(int type, int row, int col, Object value){
        return new Symbol(type, row, col, value);
    }
    
    private void showError(String error, int row, int col){
    	
    		System.out.println("Error Lexico 	                              Linea:" + row + " Columna:" + col + "  " + error);	
    		numLErr++;
    }
    
    private void checkLength(String value, int row, int col){
    	if(value.length() >= 31){
    		System.out.println("Error Lexico Id Posee mas de 31 caracteres    Linea:" + row + " Columna:" + col + "  " + value );
    		numLErr++;
    	}
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 248) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { showError(yytext(), yyline, yycolumn);
            }
          case 61: break;
          case 2: 
            { return new Symbol(sym.INTC, yyline, yycolumn, new Integer(yytext()));
            }
          case 62: break;
          case 3: 
            { checkLength(yytext(), yyline, yycolumn);
					return new Symbol(sym.ID,  yyline, yycolumn ,yytext());
            }
          case 63: break;
          case 4: 
            { return new Symbol(sym.DIV, yyline, yycolumn, yytext());
            }
          case 64: break;
          case 5: 
            { 
            }
          case 65: break;
          case 6: 
            { return new Symbol(sym.MULT, yyline, yycolumn, yytext());
            }
          case 66: break;
          case 7: 
            { return new Symbol(sym.POINT, yyline, yycolumn, yytext());
            }
          case 67: break;
          case 8: 
            { return new Symbol(sym.PLUS, yyline, yycolumn, yytext());
            }
          case 68: break;
          case 9: 
            { return new Symbol(sym.RPAREN, yyline, yycolumn, yytext());
            }
          case 69: break;
          case 10: 
            { return new Symbol(sym.SHARP, yyline ,yycolumn, yytext());
            }
          case 70: break;
          case 11: 
            { return new Symbol(sym.MINUS, yyline, yycolumn, yytext());
            }
          case 71: break;
          case 12: 
            { return new Symbol(sym.SEMICOLON, yyline, yycolumn, yytext());
            }
          case 72: break;
          case 13: 
            { return new Symbol(sym.COMMA, yyline, yycolumn, yytext());
            }
          case 73: break;
          case 14: 
            { return new Symbol(sym.LT, yyline, yycolumn, yytext());
            }
          case 74: break;
          case 15: 
            { return new Symbol(sym.EQUAL, yyline, yycolumn, yytext());
            }
          case 75: break;
          case 16: 
            { return new Symbol(sym.GT, yyline, yycolumn, yytext());
            }
          case 76: break;
          case 17: 
            { return new Symbol(sym.NEG, yyline, yycolumn, yytext());
            }
          case 77: break;
          case 18: 
            { return new Symbol(sym.LBRACE, yyline, yycolumn, yytext());
            }
          case 78: break;
          case 19: 
            { return new Symbol(sym.RBRACE, yyline, yycolumn, yytext());
            }
          case 79: break;
          case 20: 
            { return new Symbol(sym.LPAREN, yyline, yycolumn, yytext());
            }
          case 80: break;
          case 21: 
            { return new Symbol(sym.MOD, yyline, yycolumn, yytext());
            }
          case 81: break;
          case 22: 
            { return new Symbol(sym.LBRACKET, yyline, yycolumn, yytext());
            }
          case 82: break;
          case 23: 
            { return new Symbol(sym.RBRACKET, yyline, yycolumn, yytext());
            }
          case 83: break;
          case 24: 
            { return new Symbol(sym.DOUBLEC,  yyline, yycolumn, new Double(yytext()));
            }
          case 84: break;
          case 25: 
            { return new Symbol(sym.STRINGC,  yyline, yycolumn, yytext());
            }
          case 85: break;
          case 26: 
            { return new Symbol(sym.AND, yyline, yycolumn, yytext());
            }
          case 86: break;
          case 27: 
            { return new Symbol(sym.OR, yyline, yycolumn, yytext());
            }
          case 87: break;
          case 28: 
            { return new Symbol(sym.LTE, yyline, yycolumn, yytext());
            }
          case 88: break;
          case 29: 
            { return new Symbol(sym.CMP, yyline, yycolumn, yytext());
            }
          case 89: break;
          case 30: 
            { return new Symbol(sym.GTE, yyline, yycolumn, yytext());
            }
          case 90: break;
          case 31: 
            { return new Symbol(sym.NEQ, yyline, yycolumn, yytext());
            }
          case 91: break;
          case 32: 
            { return new Symbol(sym.BRACES, yyline, yycolumn, yytext());
            }
          case 92: break;
          case 33: 
            { return new Symbol(sym.PARENS, yyline, yycolumn, yytext());
            }
          case 93: break;
          case 34: 
            { return new Symbol(sym.IF, yyline, yycolumn, yytext());
            }
          case 94: break;
          case 35: 
            { return new Symbol(sym.FOR, yyline, yycolumn, yytext());
            }
          case 95: break;
          case 36: 
            { return new Symbol(sym.INT, yyline, yycolumn, yytext());
            }
          case 96: break;
          case 37: 
            { return new Symbol(sym.NEW, yyline, yycolumn, yytext());
            }
          case 97: break;
          case 38: 
            { return new Symbol(sym.BOOLC, yyline, yycolumn, new Boolean(yytext()));
            }
          case 98: break;
          case 39: 
            { return new Symbol(sym.THIS, yyline, yycolumn, yytext());
            }
          case 99: break;
          case 40: 
            { return new Symbol(sym.ELSE, yyline, yycolumn, yytext());
            }
          case 100: break;
          case 41: 
            { return new Symbol(sym.VOID, yyline, yycolumn, yytext());
            }
          case 101: break;
          case 42: 
            { return new Symbol(sym.NULL, yyline, yycolumn, yytext());
            }
          case 102: break;
          case 43: 
            { return new Symbol(sym.BOOL, yyline, yycolumn, yytext());
            }
          case 103: break;
          case 44: 
            { return new Symbol(sym.FILENAME, yyline, yycolumn, yytext());
            }
          case 104: break;
          case 45: 
            { return new Symbol(sym.CLASS, yyline, yycolumn, yytext());
            }
          case 105: break;
          case 46: 
            { return new Symbol(sym.CONST, yyline, yycolumn, yytext());
            }
          case 106: break;
          case 47: 
            { return new Symbol(sym.BREAK, yyline, yycolumn, yytext());
            }
          case 107: break;
          case 48: 
            { return new Symbol(sym.WHILE, yyline, yycolumn, yytext());
            }
          case 108: break;
          case 49: 
            { return new Symbol(sym.PRINT, yyline, yycolumn, yytext());
            }
          case 109: break;
          case 50: 
            { return new Symbol(sym.RETURN, yyline, yycolumn, yytext());
            }
          case 110: break;
          case 51: 
            { return new Symbol(sym.STRING, yyline, yycolumn, yytext());
            }
          case 111: break;
          case 52: 
            { return new Symbol(sym.DOUBLE, yyline, yycolumn, yytext());
            }
          case 112: break;
          case 53: 
            { return new Symbol(sym.MALLOC, yyline, yycolumn, yytext());
            }
          case 113: break;
          case 54: 
            { return new Symbol(sym.EXTENDS, yyline, yycolumn, yytext());
            }
          case 114: break;
          case 55: 
            { return new Symbol(sym.INCLUDES, yyline, yycolumn, yytext());
            }
          case 115: break;
          case 56: 
            { return new Symbol(sym.NEWARRAY, yyline, yycolumn, yytext());
            }
          case 116: break;
          case 57: 
            { return new Symbol(sym.READLINE, yyline, yycolumn, yytext());
            }
          case 117: break;
          case 58: 
            { return new Symbol(sym.INTERFACE, yyline, yycolumn, yytext());
            }
          case 118: break;
          case 59: 
            { return new Symbol(sym.IMPLEMENTS, yyline, yycolumn, yytext());
            }
          case 119: break;
          case 60: 
            { return new Symbol(sym.READINT, yyline, yycolumn, yytext());
            }
          case 120: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
