
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Nov 22 04:29:21 CST 2018
//----------------------------------------------------

package Lexical_Analyzer;

import java.util.*;
import java_cup.runtime.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Nov 22 04:29:21 CST 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\217\000\002\002\004\000\002\002\005\000\002\050" +
    "\004\000\002\050\002\000\002\021\007\000\002\035\004" +
    "\000\002\035\002\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\004\000\002\003\004\000\002\004\004\000\002\022" +
    "\004\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\051\003\000\002\051\003\000\002\051\004\000" +
    "\002\052\002\000\002\053\002\000\002\023\012\000\002" +
    "\054\002\000\002\055\002\000\002\023\012\000\002\056" +
    "\002\000\002\023\007\000\002\057\002\000\002\023\007" +
    "\000\002\005\004\000\002\005\002\000\002\036\005\000" +
    "\002\036\002\000\002\032\004\000\002\033\005\000\002" +
    "\060\002\000\002\024\012\000\002\043\004\000\002\043" +
    "\002\000\002\044\005\000\002\044\002\000\002\045\005" +
    "\000\002\045\002\000\002\061\002\000\002\046\005\000" +
    "\002\046\002\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\062\002\000\002\025\010\000\002\037" +
    "\004\000\002\037\002\000\002\063\002\000\002\064\002" +
    "\000\002\026\012\000\002\065\002\000\002\066\002\000" +
    "\002\026\012\000\002\067\002\000\002\070\002\000\002" +
    "\026\010\000\002\071\002\000\002\072\002\000\002\026" +
    "\010\000\002\007\006\000\002\040\004\000\002\040\004" +
    "\000\002\040\002\000\002\041\004\000\002\041\002\000" +
    "\002\010\004\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\011\010" +
    "\000\002\047\004\000\002\047\002\000\002\012\007\000" +
    "\002\013\013\000\002\013\012\000\002\013\012\000\002" +
    "\013\011\000\002\014\005\000\002\014\004\000\002\015" +
    "\004\000\002\016\010\000\002\073\002\000\002\042\006" +
    "\000\002\042\002\000\002\027\005\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\005\000\002\027\005\000\002\027\005\000\002\027" +
    "\005\000\002\027\005\000\002\027\005\000\002\027\004" +
    "\000\002\027\005\000\002\027\005\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\027\005\000\002" +
    "\027\005\000\002\027\005\000\002\027\004\000\002\027" +
    "\006\000\002\027\010\000\002\027\004\000\002\027\004" +
    "\000\002\027\006\000\002\030\003\000\002\030\005\000" +
    "\002\030\006\000\002\031\006\000\002\031\010\000\002" +
    "\031\010\000\002\031\004\000\002\031\006\000\002\031" +
    "\006\000\002\017\006\000\002\017\010\000\002\074\002" +
    "\000\002\020\005\000\002\020\002\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0118\000\030\003\ufffe\013\006\040\ufffe\041\ufffe\042" +
    "\ufffe\043\ufffe\044\ufffe\045\ufffe\050\ufffe\071\ufffe\072\ufffe" +
    "\001\002\000\004\002\u011a\001\002\000\026\003\027\040" +
    "\016\041\037\042\033\043\024\044\036\045\015\050\030" +
    "\071\026\072\020\001\002\000\004\037\011\001\002\000" +
    "\030\003\ufffe\013\006\040\ufffe\041\ufffe\042\ufffe\043\ufffe" +
    "\044\ufffe\045\ufffe\050\ufffe\071\ufffe\072\ufffe\001\002\000" +
    "\026\003\uffff\040\uffff\041\uffff\042\uffff\043\uffff\044\uffff" +
    "\045\uffff\050\uffff\071\uffff\072\uffff\001\002\000\004\024" +
    "\012\001\002\000\004\074\013\001\002\000\004\026\014" +
    "\001\002\000\030\003\ufffd\013\ufffd\040\ufffd\041\ufffd\042" +
    "\ufffd\043\ufffd\044\ufffd\045\ufffd\050\ufffd\071\ufffd\072\ufffd" +
    "\001\002\000\004\072\u0105\001\002\000\010\017\ufff1\035" +
    "\ufff1\072\ufff1\001\002\000\030\002\ufff6\003\ufff6\040\ufff6" +
    "\041\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6\050\ufff6\071" +
    "\ufff6\072\ufff6\001\002\000\010\017\uffed\035\uffed\072\uffed" +
    "\001\002\000\030\002\ufff8\003\ufff8\040\ufff8\041\ufff8\042" +
    "\ufff8\043\ufff8\044\ufff8\045\ufff8\050\ufff8\071\ufff8\072\ufff8" +
    "\001\002\000\030\002\ufffb\003\027\040\016\041\037\042" +
    "\033\043\024\044\036\045\015\050\030\071\026\072\020" +
    "\001\002\000\006\035\224\072\370\001\002\000\010\017" +
    "\uffee\035\uffee\072\uffee\001\002\000\030\002\ufff7\003\ufff7" +
    "\040\ufff7\041\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\050" +
    "\ufff7\071\ufff7\072\ufff7\001\002\000\014\040\016\041\037" +
    "\042\033\043\024\072\020\001\002\000\006\005\364\015" +
    "\365\001\002\000\004\072\325\001\002\000\004\005\324" +
    "\001\002\000\030\002\ufff9\003\ufff9\040\ufff9\041\ufff9\042" +
    "\ufff9\043\ufff9\044\ufff9\045\ufff9\050\ufff9\071\ufff9\072\ufff9" +
    "\001\002\000\010\017\uffef\035\uffef\072\uffef\001\002\000" +
    "\030\002\ufffa\003\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa" +
    "\044\ufffa\045\ufffa\050\ufffa\071\ufffa\072\ufffa\001\002\000" +
    "\004\005\323\001\002\000\004\072\040\001\002\000\010" +
    "\017\ufff0\035\ufff0\072\ufff0\001\002\000\006\016\uffe8\036" +
    "\uffe3\001\002\000\004\016\311\001\002\000\004\036\043" +
    "\001\002\000\004\014\045\001\002\000\032\002\uffe2\003" +
    "\uffe2\015\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2" +
    "\045\uffe2\050\uffe2\071\uffe2\072\uffe2\001\002\000\074\005" +
    "\uffba\006\uffba\014\uffba\015\uffba\016\uffba\034\uffba\040\uffba" +
    "\041\uffba\042\uffba\043\uffba\051\uffba\053\uffba\054\uffba\055" +
    "\uffba\056\uffba\057\uffba\060\uffba\061\uffba\062\uffba\063\uffba" +
    "\064\uffba\065\uffba\070\uffba\071\uffba\072\uffba\073\uffba\075" +
    "\uffba\076\uffba\077\uffba\001\002\000\074\005\061\006\060" +
    "\014\045\015\uffb8\016\056\034\100\040\016\041\037\042" +
    "\033\043\024\051\064\053\103\054\057\055\067\056\074" +
    "\057\114\060\065\061\070\062\062\063\053\064\050\065" +
    "\111\070\073\071\026\072\066\073\055\075\106\076\102" +
    "\077\101\001\002\000\064\005\uffb1\006\uffb1\014\uffb1\015" +
    "\uffb1\016\uffb1\034\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1" +
    "\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\063" +
    "\uffb1\064\uffb1\065\uffb1\070\uffb1\072\uffb1\073\uffb1\075\uffb1" +
    "\076\uffb1\077\uffb1\001\002\000\004\036\310\001\002\000" +
    "\050\004\uff9e\005\uff9e\006\uff9e\007\uff9e\010\uff9e\011\uff9e" +
    "\012\uff9e\017\uff9e\020\uff9e\021\uff9e\023\uff9e\024\uff9e\025" +
    "\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e\033\uff9e" +
    "\001\002\000\064\005\uffb3\006\uffb3\014\uffb3\015\uffb3\016" +
    "\uffb3\034\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3" +
    "\056\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3\064" +
    "\uffb3\065\uffb3\070\uffb3\072\uffb3\073\uffb3\075\uffb3\076\uffb3" +
    "\077\uffb3\001\002\000\004\036\307\001\002\000\064\005" +
    "\uffb0\006\uffb0\014\uffb0\015\uffb0\016\uffb0\034\uffb0\051\uffb0" +
    "\052\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\060" +
    "\uffb0\061\uffb0\062\uffb0\063\uffb0\064\uffb0\065\uffb0\070\uffb0" +
    "\072\uffb0\073\uffb0\075\uffb0\076\uffb0\077\uffb0\001\002\000" +
    "\050\004\uff74\005\uff74\006\uff74\007\uff74\010\uff74\011\uff74" +
    "\012\uff74\017\uff74\020\uff74\021\uff74\023\uff74\024\uff74\025" +
    "\uff74\026\uff74\027\uff74\030\uff74\031\uff74\032\uff74\033\uff74" +
    "\001\002\000\040\006\060\016\056\034\100\060\065\061" +
    "\070\062\062\063\053\064\050\065\111\070\073\072\117" +
    "\073\055\075\106\076\102\077\101\001\002\000\004\016" +
    "\263\001\002\000\040\006\060\016\056\034\100\060\065" +
    "\061\070\062\062\063\053\064\050\065\111\070\073\072" +
    "\117\073\055\075\106\076\102\077\101\001\002\000\064" +
    "\005\uffb6\006\uffb6\014\uffb6\015\uffb6\016\uffb6\034\uffb6\051" +
    "\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6" +
    "\060\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6\070" +
    "\uffb6\072\uffb6\073\uffb6\075\uffb6\076\uffb6\077\uffb6\001\002" +
    "\000\004\016\255\001\002\000\064\005\uffb4\006\uffb4\014" +
    "\uffb4\015\uffb4\016\uffb4\034\uffb4\051\uffb4\052\uffb4\053\uffb4" +
    "\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\062" +
    "\uffb4\063\uffb4\064\uffb4\065\uffb4\070\uffb4\072\uffb4\073\uffb4" +
    "\075\uffb4\076\uffb4\077\uffb4\001\002\000\004\016\246\001" +
    "\002\000\050\004\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c" +
    "\011\uff9c\012\uff9c\017\uff9c\020\uff9c\021\uff9c\023\uff9c\024" +
    "\uff9c\025\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c" +
    "\033\uff9c\001\002\000\054\004\uff85\005\uff85\006\uff85\007" +
    "\uff85\010\uff85\012\uff85\016\121\020\uff85\022\uff85\023\uff85" +
    "\024\uff85\025\uff85\026\uff85\027\uff85\030\uff85\031\uff85\032" +
    "\uff85\033\uff85\035\uffed\036\120\072\uffed\001\002\000\042" +
    "\005\243\006\060\016\056\034\100\060\065\061\070\062" +
    "\062\063\053\064\050\065\111\070\073\072\117\073\055" +
    "\075\106\076\102\077\101\001\002\000\004\016\240\001" +
    "\002\000\074\005\uffbc\006\uffbc\014\uffbc\015\uffbc\016\uffbc" +
    "\034\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\051\uffbc\053" +
    "\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc" +
    "\062\uffbc\063\uffbc\064\uffbc\065\uffbc\070\uffbc\071\uffbc\072" +
    "\uffbc\073\uffbc\075\uffbc\076\uffbc\077\uffbc\001\002\000\064" +
    "\005\uffaf\006\uffaf\014\uffaf\015\uffaf\016\uffaf\034\uffaf\051" +
    "\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf" +
    "\060\uffaf\061\uffaf\062\uffaf\063\uffaf\064\uffaf\065\uffaf\070" +
    "\uffaf\072\uffaf\073\uffaf\075\uffaf\076\uffaf\077\uffaf\001\002" +
    "\000\050\004\uff73\005\uff73\006\uff73\007\uff73\010\uff73\011" +
    "\uff73\012\uff73\017\uff73\020\uff73\021\uff73\023\uff73\024\uff73" +
    "\025\uff73\026\uff73\027\uff73\030\uff73\031\uff73\032\uff73\033" +
    "\uff73\001\002\000\004\005\237\001\002\000\064\005\uffb5" +
    "\006\uffb5\014\uffb5\015\uffb5\016\uffb5\034\uffb5\051\uffb5\052" +
    "\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5" +
    "\061\uffb5\062\uffb5\063\uffb5\064\uffb5\065\uffb5\070\uffb5\072" +
    "\uffb5\073\uffb5\075\uffb5\076\uffb5\077\uffb5\001\002\000\004" +
    "\015\236\001\002\000\042\004\135\005\235\006\125\007" +
    "\131\010\140\012\136\020\126\023\132\024\142\025\130" +
    "\026\141\027\127\030\133\031\134\032\124\033\143\001" +
    "\002\000\040\006\060\016\056\034\100\060\065\061\070" +
    "\062\062\063\053\064\050\065\111\070\073\072\117\073" +
    "\055\075\106\076\102\077\101\001\002\000\050\004\uff75" +
    "\005\uff75\006\uff75\007\uff75\010\uff75\011\uff75\012\uff75\017" +
    "\uff75\020\uff75\021\uff75\023\uff75\024\uff75\025\uff75\026\uff75" +
    "\027\uff75\030\uff75\031\uff75\032\uff75\033\uff75\001\002\000" +
    "\050\004\uff76\005\uff76\006\uff76\007\uff76\010\uff76\011\uff76" +
    "\012\uff76\017\uff76\020\uff76\021\uff76\023\uff76\024\uff76\025" +
    "\uff76\026\uff76\027\uff76\030\uff76\031\uff76\032\uff76\033\uff76" +
    "\001\002\000\004\016\230\001\002\000\052\004\uff9d\005" +
    "\uff9d\006\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d\017\uff9d" +
    "\020\uff9d\021\uff9d\022\226\023\uff9d\024\uff9d\025\uff9d\026" +
    "\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d\001\002" +
    "\000\074\005\uffbb\006\uffbb\014\uffbb\015\uffbb\016\uffbb\034" +
    "\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\051\uffbb\053\uffbb" +
    "\054\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb\062" +
    "\uffbb\063\uffbb\064\uffbb\065\uffbb\070\uffbb\071\uffbb\072\uffbb" +
    "\073\uffbb\075\uffbb\076\uffbb\077\uffbb\001\002\000\050\004" +
    "\uff77\005\uff77\006\uff77\007\uff77\010\uff77\011\uff77\012\uff77" +
    "\017\uff77\020\uff77\021\uff77\023\uff77\024\uff77\025\uff77\026" +
    "\uff77\027\uff77\030\uff77\031\uff77\032\uff77\033\uff77\001\002" +
    "\000\062\005\061\006\060\014\045\015\uffb8\016\056\034" +
    "\100\051\064\053\103\054\057\055\067\056\074\057\114" +
    "\060\065\061\070\062\062\063\053\064\050\065\111\070" +
    "\073\072\117\073\055\075\106\076\102\077\101\001\002" +
    "\000\006\035\224\072\223\001\002\000\004\016\220\001" +
    "\002\000\050\004\uff9b\005\uff9b\006\uff9b\007\uff9b\010\uff9b" +
    "\011\uff9b\012\uff9b\017\uff9b\020\uff9b\021\uff9b\023\uff9b\024" +
    "\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b" +
    "\033\uff9b\001\002\000\064\005\uffb2\006\uffb2\014\uffb2\015" +
    "\uffb2\016\uffb2\034\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2" +
    "\055\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2\063" +
    "\uffb2\064\uffb2\065\uffb2\070\uffb2\072\uffb2\073\uffb2\075\uffb2" +
    "\076\uffb2\077\uffb2\001\002\000\004\016\115\001\002\000" +
    "\040\006\060\016\056\034\100\060\065\061\070\062\062" +
    "\063\053\064\050\065\111\070\073\072\117\073\055\075" +
    "\106\076\102\077\101\001\002\000\044\004\135\006\125" +
    "\007\131\010\140\011\150\012\136\017\uffa0\020\126\023" +
    "\132\024\142\025\130\026\141\027\127\030\133\031\134" +
    "\032\124\033\143\001\002\000\056\004\uff85\005\uff85\006" +
    "\uff85\007\uff85\010\uff85\011\uff85\012\uff85\016\121\017\uff85" +
    "\020\uff85\021\uff85\022\uff85\023\uff85\024\uff85\025\uff85\026" +
    "\uff85\027\uff85\030\uff85\031\uff85\032\uff85\033\uff85\036\120" +
    "\001\002\000\050\004\uff7f\005\uff7f\006\uff7f\007\uff7f\010" +
    "\uff7f\011\uff7f\012\uff7f\017\uff7f\020\uff7f\021\uff7f\023\uff7f" +
    "\024\uff7f\025\uff7f\026\uff7f\027\uff7f\030\uff7f\031\uff7f\032" +
    "\uff7f\033\uff7f\001\002\000\042\006\060\016\056\017\uff78" +
    "\034\100\060\065\061\070\062\062\063\053\064\050\065" +
    "\111\070\073\072\117\073\055\075\106\076\102\077\101" +
    "\001\002\000\004\017\214\001\002\000\044\004\135\006" +
    "\125\007\131\010\140\011\uff7a\012\136\017\uff7a\020\126" +
    "\023\132\024\142\025\130\026\141\027\127\030\133\031" +
    "\134\032\124\033\143\001\002\000\040\006\060\016\056" +
    "\034\100\060\065\061\070\062\062\063\053\064\050\065" +
    "\111\070\073\072\117\073\055\075\106\076\102\077\101" +
    "\001\002\000\040\006\060\016\056\034\100\060\065\061" +
    "\070\062\062\063\053\064\050\065\111\070\073\072\117" +
    "\073\055\075\106\076\102\077\101\001\002\000\040\006" +
    "\060\016\056\034\100\060\065\061\070\062\062\063\053" +
    "\064\050\065\111\070\073\072\117\073\055\075\106\076" +
    "\102\077\101\001\002\000\040\006\060\016\056\034\100" +
    "\060\065\061\070\062\062\063\053\064\050\065\111\070" +
    "\073\072\117\073\055\075\106\076\102\077\101\001\002" +
    "\000\040\006\060\016\056\034\100\060\065\061\070\062" +
    "\062\063\053\064\050\065\111\070\073\072\117\073\055" +
    "\075\106\076\102\077\101\001\002\000\040\006\060\016" +
    "\056\034\100\060\065\061\070\062\062\063\053\064\050" +
    "\065\111\070\073\072\117\073\055\075\106\076\102\077" +
    "\101\001\002\000\040\006\060\016\056\034\100\060\065" +
    "\061\070\062\062\063\053\064\050\065\111\070\073\072" +
    "\117\073\055\075\106\076\102\077\101\001\002\000\040" +
    "\006\060\016\056\034\100\060\065\061\070\062\062\063" +
    "\053\064\050\065\111\070\073\072\117\073\055\075\106" +
    "\076\102\077\101\001\002\000\040\006\060\016\056\034" +
    "\100\060\065\061\070\062\062\063\053\064\050\065\111" +
    "\070\073\072\117\073\055\075\106\076\102\077\101\001" +
    "\002\000\040\006\060\016\056\034\100\060\065\061\070" +
    "\062\062\063\053\064\050\065\111\070\073\072\117\073" +
    "\055\075\106\076\102\077\101\001\002\000\010\066\156" +
    "\067\157\072\155\001\002\000\006\011\150\017\uffa0\001" +
    "\002\000\040\006\060\016\056\034\100\060\065\061\070" +
    "\062\062\063\053\064\050\065\111\070\073\072\117\073" +
    "\055\075\106\076\102\077\101\001\002\000\040\006\060" +
    "\016\056\034\100\060\065\061\070\062\062\063\053\064" +
    "\050\065\111\070\073\072\117\073\055\075\106\076\102" +
    "\077\101\001\002\000\040\006\060\016\056\034\100\060" +
    "\065\061\070\062\062\063\053\064\050\065\111\070\073" +
    "\072\117\073\055\075\106\076\102\077\101\001\002\000" +
    "\040\006\060\016\056\034\100\060\065\061\070\062\062" +
    "\063\053\064\050\065\111\070\073\072\117\073\055\075" +
    "\106\076\102\077\101\001\002\000\050\004\uff8c\005\uff8c" +
    "\006\uff8c\007\uff8c\010\uff8c\011\uff8c\012\uff8c\017\uff8c\020" +
    "\uff8c\021\uff8c\023\uff8c\024\uff8c\025\uff8c\026\uff8c\027\uff8c" +
    "\030\uff8c\031\uff8c\032\uff8c\033\uff8c\001\002\000\050\004" +
    "\uff93\005\uff93\006\uff93\007\uff93\010\uff93\011\uff93\012\uff93" +
    "\017\uff93\020\uff93\021\uff93\023\uff93\024\uff93\025\uff93\026" +
    "\uff93\027\uff93\030\133\031\134\032\124\033\143\001\002" +
    "\000\050\004\uff91\005\uff91\006\uff91\007\uff91\010\uff91\011" +
    "\uff91\012\uff91\017\uff91\020\uff91\021\uff91\023\uff91\024\uff91" +
    "\025\uff91\026\uff91\027\uff91\030\133\031\134\032\124\033" +
    "\143\001\002\000\050\004\135\005\uff96\006\125\007\uff96" +
    "\010\uff96\011\uff96\012\uff96\017\uff96\020\uff96\021\uff96\023" +
    "\uff96\024\142\025\130\026\141\027\127\030\133\031\134" +
    "\032\124\033\143\001\002\000\040\006\060\016\056\034" +
    "\100\060\065\061\070\062\062\063\053\064\050\065\111" +
    "\070\073\072\117\073\055\075\106\076\102\077\101\001" +
    "\002\000\004\017\uff79\001\002\000\044\004\135\006\125" +
    "\007\131\010\140\011\uffa2\012\136\017\uffa2\020\126\023" +
    "\132\024\142\025\130\026\141\027\127\030\133\031\134" +
    "\032\124\033\143\001\002\000\006\011\150\017\uffa0\001" +
    "\002\000\004\017\uffa1\001\002\000\056\004\uff84\005\uff84" +
    "\006\uff84\007\uff84\010\uff84\011\uff84\012\uff84\016\176\017" +
    "\uff84\020\uff84\021\uff84\022\uff84\023\uff84\024\uff84\025\uff84" +
    "\026\uff84\027\uff84\030\uff84\031\uff84\032\uff84\033\uff84\036" +
    "\175\001\002\000\004\016\172\001\002\000\004\016\165" +
    "\001\002\000\006\016\162\036\161\001\002\000\050\004" +
    "\uff7d\005\uff7d\006\uff7d\007\uff7d\010\uff7d\011\uff7d\012\uff7d" +
    "\017\uff7d\020\uff7d\021\uff7d\023\uff7d\024\uff7d\025\uff7d\026" +
    "\uff7d\027\uff7d\030\uff7d\031\uff7d\032\uff7d\033\uff7d\001\002" +
    "\000\042\006\060\016\056\017\uff78\034\100\060\065\061" +
    "\070\062\062\063\053\064\050\065\111\070\073\072\117" +
    "\073\055\075\106\076\102\077\101\001\002\000\004\017" +
    "\164\001\002\000\050\004\uff80\005\uff80\006\uff80\007\uff80" +
    "\010\uff80\011\uff80\012\uff80\017\uff80\020\uff80\021\uff80\023" +
    "\uff80\024\uff80\025\uff80\026\uff80\027\uff80\030\uff80\031\uff80" +
    "\032\uff80\033\uff80\001\002\000\040\006\060\016\056\034" +
    "\100\060\065\061\070\062\062\063\053\064\050\065\111" +
    "\070\073\072\117\073\055\075\106\076\102\077\101\001" +
    "\002\000\042\004\135\006\125\007\131\010\140\011\167" +
    "\012\136\020\126\023\132\024\142\025\130\026\141\027" +
    "\127\030\133\031\134\032\124\033\143\001\002\000\040" +
    "\006\060\016\056\034\100\060\065\061\070\062\062\063" +
    "\053\064\050\065\111\070\073\072\117\073\055\075\106" +
    "\076\102\077\101\001\002\000\042\004\135\006\125\007" +
    "\131\010\140\012\136\017\171\020\126\023\132\024\142" +
    "\025\130\026\141\027\127\030\133\031\134\032\124\033" +
    "\143\001\002\000\006\016\uff7b\036\uff7b\001\002\000\040" +
    "\006\060\016\056\034\100\060\065\061\070\062\062\063" +
    "\053\064\050\065\111\070\073\072\117\073\055\075\106" +
    "\076\102\077\101\001\002\000\042\004\135\006\125\007" +
    "\131\010\140\012\136\017\174\020\126\023\132\024\142" +
    "\025\130\026\141\027\127\030\133\031\134\032\124\033" +
    "\143\001\002\000\006\016\uff7c\036\uff7c\001\002\000\050" +
    "\004\uff7e\005\uff7e\006\uff7e\007\uff7e\010\uff7e\011\uff7e\012" +
    "\uff7e\017\uff7e\020\uff7e\021\uff7e\023\uff7e\024\uff7e\025\uff7e" +
    "\026\uff7e\027\uff7e\030\uff7e\031\uff7e\032\uff7e\033\uff7e\001" +
    "\002\000\042\006\060\016\056\017\uff78\034\100\060\065" +
    "\061\070\062\062\063\053\064\050\065\111\070\073\072" +
    "\117\073\055\075\106\076\102\077\101\001\002\000\004" +
    "\017\200\001\002\000\050\004\uff81\005\uff81\006\uff81\007" +
    "\uff81\010\uff81\011\uff81\012\uff81\017\uff81\020\uff81\021\uff81" +
    "\023\uff81\024\uff81\025\uff81\026\uff81\027\uff81\030\uff81\031" +
    "\uff81\032\uff81\033\uff81\001\002\000\050\004\uff99\005\uff99" +
    "\006\uff99\007\uff99\010\uff99\011\uff99\012\uff99\017\uff99\020" +
    "\uff99\021\uff99\023\uff99\024\142\025\130\026\141\027\127" +
    "\030\133\031\134\032\124\033\143\001\002\000\050\004" +
    "\uff8e\005\uff8e\006\uff8e\007\uff8e\010\uff8e\011\uff8e\012\uff8e" +
    "\017\uff8e\020\uff8e\021\uff8e\023\uff8e\024\uff8e\025\uff8e\026" +
    "\uff8e\027\uff8e\030\uff8e\031\uff8e\032\124\033\143\001\002" +
    "\000\050\004\uff8f\005\uff8f\006\uff8f\007\uff8f\010\uff8f\011" +
    "\uff8f\012\uff8f\017\uff8f\020\uff8f\021\uff8f\023\uff8f\024\uff8f" +
    "\025\uff8f\026\uff8f\027\uff8f\030\uff8f\031\uff8f\032\124\033" +
    "\143\001\002\000\050\004\135\005\uff95\006\125\007\uff95" +
    "\010\uff95\011\uff95\012\uff95\017\uff95\020\uff95\021\uff95\023" +
    "\uff95\024\142\025\130\026\141\027\127\030\133\031\134" +
    "\032\124\033\143\001\002\000\050\004\135\005\uff97\006" +
    "\125\007\uff97\010\uff97\011\uff97\012\uff97\017\uff97\020\uff97" +
    "\021\uff97\023\uff97\024\142\025\130\026\141\027\127\030" +
    "\133\031\134\032\124\033\143\001\002\000\050\004\uff92" +
    "\005\uff92\006\uff92\007\uff92\010\uff92\011\uff92\012\uff92\017" +
    "\uff92\020\uff92\021\uff92\023\uff92\024\uff92\025\uff92\026\uff92" +
    "\027\uff92\030\133\031\134\032\124\033\143\001\002\000" +
    "\050\004\uff90\005\uff90\006\uff90\007\uff90\010\uff90\011\uff90" +
    "\012\uff90\017\uff90\020\uff90\021\uff90\023\uff90\024\uff90\025" +
    "\uff90\026\uff90\027\uff90\030\133\031\134\032\124\033\143" +
    "\001\002\000\042\004\135\006\125\007\131\010\140\012" +
    "\136\020\126\021\211\023\132\024\142\025\130\026\141" +
    "\027\127\030\133\031\134\032\124\033\143\001\002\000" +
    "\052\004\uff83\005\uff83\006\uff83\007\uff83\010\uff83\011\uff83" +
    "\012\uff83\017\uff83\020\uff83\021\uff83\022\uff83\023\uff83\024" +
    "\uff83\025\uff83\026\uff83\027\uff83\030\uff83\031\uff83\032\uff83" +
    "\033\uff83\001\002\000\050\004\uff98\005\uff98\006\uff98\007" +
    "\uff98\010\uff98\011\uff98\012\uff98\017\uff98\020\uff98\021\uff98" +
    "\023\uff98\024\142\025\130\026\141\027\127\030\133\031" +
    "\134\032\124\033\143\001\002\000\050\004\uff8d\005\uff8d" +
    "\006\uff8d\007\uff8d\010\uff8d\011\uff8d\012\uff8d\017\uff8d\020" +
    "\uff8d\021\uff8d\023\uff8d\024\uff8d\025\uff8d\026\uff8d\027\uff8d" +
    "\030\uff8d\031\uff8d\032\uff8d\033\143\001\002\000\050\004" +
    "\uff82\005\uff82\006\uff82\007\uff82\010\uff82\011\uff82\012\uff82" +
    "\017\uff82\020\uff82\021\uff82\023\uff82\024\uff82\025\uff82\026" +
    "\uff82\027\uff82\030\uff82\031\uff82\032\uff82\033\uff82\001\002" +
    "\000\004\017\216\001\002\000\004\005\217\001\002\000" +
    "\064\005\uffa3\006\uffa3\014\uffa3\015\uffa3\016\uffa3\034\uffa3" +
    "\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3\056\uffa3\057" +
    "\uffa3\060\uffa3\061\uffa3\062\uffa3\063\uffa3\064\uffa3\065\uffa3" +
    "\070\uffa3\072\uffa3\073\uffa3\075\uffa3\076\uffa3\077\uffa3\001" +
    "\002\000\040\006\060\016\056\034\100\060\065\061\070" +
    "\062\062\063\053\064\050\065\111\070\073\072\117\073" +
    "\055\075\106\076\102\077\101\001\002\000\042\004\135" +
    "\006\125\007\131\010\140\012\136\017\222\020\126\023" +
    "\132\024\142\025\130\026\141\027\127\030\133\031\134" +
    "\032\124\033\143\001\002\000\050\004\uff86\005\uff86\006" +
    "\uff86\007\uff86\010\uff86\011\uff86\012\uff86\017\uff86\020\uff86" +
    "\021\uff86\023\uff86\024\uff86\025\uff86\026\uff86\027\uff86\030" +
    "\uff86\031\uff86\032\uff86\033\uff86\001\002\000\010\005\ufff2" +
    "\011\ufff2\017\ufff2\001\002\000\010\017\uffec\035\uffec\072" +
    "\uffec\001\002\000\004\015\uffb9\001\002\000\040\006\060" +
    "\016\056\034\100\060\065\061\070\062\062\063\053\064" +
    "\050\065\111\070\073\072\117\073\055\075\106\076\102" +
    "\077\101\001\002\000\050\004\135\005\uff9f\006\125\007" +
    "\131\010\140\011\uff9f\012\136\017\uff9f\020\126\021\uff9f" +
    "\023\132\024\142\025\130\026\141\027\127\030\133\031" +
    "\134\032\124\033\143\001\002\000\040\006\060\016\056" +
    "\034\100\060\065\061\070\062\062\063\053\064\050\065" +
    "\111\070\073\072\117\073\055\075\106\076\102\077\101" +
    "\001\002\000\042\004\135\006\125\007\131\010\140\012" +
    "\136\017\232\020\126\023\132\024\142\025\130\026\141" +
    "\027\127\030\133\031\134\032\124\033\143\001\002\000" +
    "\060\005\061\006\060\014\045\016\056\034\100\051\064" +
    "\053\103\054\057\055\067\056\074\057\114\060\065\061" +
    "\070\062\062\063\053\064\050\065\111\070\073\072\117" +
    "\073\055\075\106\076\102\077\101\001\002\000\064\005" +
    "\uffab\006\uffab\014\uffab\015\uffab\016\uffab\034\uffab\051\uffab" +
    "\052\uffab\053\uffab\054\uffab\055\uffab\056\uffab\057\uffab\060" +
    "\uffab\061\uffab\062\uffab\063\uffab\064\uffab\065\uffab\070\uffab" +
    "\072\uffab\073\uffab\075\uffab\076\uffab\077\uffab\001\002\000" +
    "\050\004\135\005\uff8b\006\125\007\131\010\140\011\uff8b" +
    "\012\uff8b\017\uff8b\020\uff8b\021\uff8b\023\132\024\142\025" +
    "\130\026\141\027\127\030\133\031\134\032\124\033\143" +
    "\001\002\000\064\005\uffb7\006\uffb7\014\uffb7\015\uffb7\016" +
    "\uffb7\034\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7" +
    "\056\uffb7\057\uffb7\060\uffb7\061\uffb7\062\uffb7\063\uffb7\064" +
    "\uffb7\065\uffb7\070\uffb7\072\uffb7\073\uffb7\075\uffb7\076\uffb7" +
    "\077\uffb7\001\002\000\110\002\uffbd\003\uffbd\005\uffbd\006" +
    "\uffbd\014\uffbd\015\uffbd\016\uffbd\034\uffbd\040\uffbd\041\uffbd" +
    "\042\uffbd\043\uffbd\044\uffbd\045\uffbd\050\uffbd\051\uffbd\052" +
    "\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd" +
    "\061\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd\070\uffbd\071" +
    "\uffbd\072\uffbd\073\uffbd\075\uffbd\076\uffbd\077\uffbd\001\002" +
    "\000\064\005\uffa4\006\uffa4\014\uffa4\015\uffa4\016\uffa4\034" +
    "\uffa4\051\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4\056\uffa4" +
    "\057\uffa4\060\uffa4\061\uffa4\062\uffa4\063\uffa4\064\uffa4\065" +
    "\uffa4\070\uffa4\072\uffa4\073\uffa4\075\uffa4\076\uffa4\077\uffa4" +
    "\001\002\000\004\072\241\001\002\000\004\017\242\001" +
    "\002\000\050\004\uff8a\005\uff8a\006\uff8a\007\uff8a\010\uff8a" +
    "\011\uff8a\012\uff8a\017\uff8a\020\uff8a\021\uff8a\023\uff8a\024" +
    "\uff8a\025\uff8a\026\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a" +
    "\033\uff8a\001\002\000\064\005\uffa5\006\uffa5\014\uffa5\015" +
    "\uffa5\016\uffa5\034\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5" +
    "\055\uffa5\056\uffa5\057\uffa5\060\uffa5\061\uffa5\062\uffa5\063" +
    "\uffa5\064\uffa5\065\uffa5\070\uffa5\072\uffa5\073\uffa5\075\uffa5" +
    "\076\uffa5\077\uffa5\001\002\000\042\004\135\005\245\006" +
    "\125\007\131\010\140\012\136\020\126\023\132\024\142" +
    "\025\130\026\141\027\127\030\133\031\134\032\124\033" +
    "\143\001\002\000\064\005\uffa6\006\uffa6\014\uffa6\015\uffa6" +
    "\016\uffa6\034\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6\055" +
    "\uffa6\056\uffa6\057\uffa6\060\uffa6\061\uffa6\062\uffa6\063\uffa6" +
    "\064\uffa6\065\uffa6\070\uffa6\072\uffa6\073\uffa6\075\uffa6\076" +
    "\uffa6\077\uffa6\001\002\000\040\006\060\016\056\034\100" +
    "\060\065\061\070\062\062\063\053\064\050\065\111\070" +
    "\073\072\117\073\055\075\106\076\102\077\101\001\002" +
    "\000\042\004\135\006\125\007\131\010\140\012\136\017" +
    "\250\020\126\023\132\024\142\025\130\026\141\027\127" +
    "\030\133\031\134\032\124\033\143\001\002\000\060\005" +
    "\061\006\060\014\045\016\056\034\100\051\064\053\103" +
    "\054\057\055\067\056\074\057\114\060\065\061\070\062" +
    "\062\063\053\064\050\065\111\070\073\072\117\073\055" +
    "\075\106\076\102\077\101\001\002\000\064\005\uffac\006" +
    "\uffac\014\uffac\015\uffac\016\uffac\034\uffac\051\uffac\052\252" +
    "\053\uffac\054\uffac\055\uffac\056\uffac\057\uffac\060\uffac\061" +
    "\uffac\062\uffac\063\uffac\064\uffac\065\uffac\070\uffac\072\uffac" +
    "\073\uffac\075\uffac\076\uffac\077\uffac\001\002\000\060\005" +
    "\061\006\060\014\045\016\056\034\100\051\064\053\103" +
    "\054\057\055\067\056\074\057\114\060\065\061\070\062" +
    "\062\063\053\064\050\065\111\070\073\072\117\073\055" +
    "\075\106\076\102\077\101\001\002\000\064\005\uffae\006" +
    "\uffae\014\uffae\015\uffae\016\uffae\034\uffae\051\uffae\052\uffae" +
    "\053\uffae\054\uffae\055\uffae\056\uffae\057\uffae\060\uffae\061" +
    "\uffae\062\uffae\063\uffae\064\uffae\065\uffae\070\uffae\072\uffae" +
    "\073\uffae\075\uffae\076\uffae\077\uffae\001\002\000\064\005" +
    "\uffad\006\uffad\014\uffad\015\uffad\016\uffad\034\uffad\051\uffad" +
    "\052\uffad\053\uffad\054\uffad\055\uffad\056\uffad\057\uffad\060" +
    "\uffad\061\uffad\062\uffad\063\uffad\064\uffad\065\uffad\070\uffad" +
    "\072\uffad\073\uffad\075\uffad\076\uffad\077\uffad\001\002\000" +
    "\040\006\060\016\056\034\100\060\065\061\070\062\062" +
    "\063\053\064\050\065\111\070\073\072\117\073\055\075" +
    "\106\076\102\077\101\001\002\000\042\004\135\006\125" +
    "\007\131\010\140\011\257\012\136\020\126\023\132\024" +
    "\142\025\130\026\141\027\127\030\133\031\134\032\124" +
    "\033\143\001\002\000\014\040\016\041\037\042\033\043" +
    "\024\072\020\001\002\000\006\017\261\035\224\001\002" +
    "\000\050\004\uff89\005\uff89\006\uff89\007\uff89\010\uff89\011" +
    "\uff89\012\uff89\017\uff89\020\uff89\021\uff89\023\uff89\024\uff89" +
    "\025\uff89\026\uff89\027\uff89\030\uff89\031\uff89\032\uff89\033" +
    "\uff89\001\002\000\050\004\uff94\005\uff94\006\uff94\007\uff94" +
    "\010\uff94\011\uff94\012\uff94\017\uff94\020\uff94\021\uff94\023" +
    "\uff94\024\142\025\130\026\141\027\127\030\133\031\134" +
    "\032\124\033\143\001\002\000\042\005\264\006\060\016" +
    "\056\034\100\060\065\061\070\062\062\063\053\064\050" +
    "\065\111\070\073\072\117\073\055\075\106\076\102\077" +
    "\101\001\002\000\040\006\060\016\056\034\100\060\065" +
    "\061\070\062\062\063\053\064\050\065\111\070\073\072" +
    "\117\073\055\075\106\076\102\077\101\001\002\000\042" +
    "\004\135\005\266\006\125\007\131\010\140\012\136\020" +
    "\126\023\132\024\142\025\130\026\141\027\127\030\133" +
    "\031\134\032\124\033\143\001\002\000\040\006\060\016" +
    "\056\034\100\060\065\061\070\062\062\063\053\064\050" +
    "\065\111\070\073\072\117\073\055\075\106\076\102\077" +
    "\101\001\002\000\042\004\135\005\270\006\125\007\131" +
    "\010\140\012\136\020\126\023\132\024\142\025\130\026" +
    "\141\027\127\030\133\031\134\032\124\033\143\001\002" +
    "\000\042\006\060\016\056\017\271\034\100\060\065\061" +
    "\070\062\062\063\053\064\050\065\111\070\073\072\117" +
    "\073\055\075\106\076\102\077\101\001\002\000\060\005" +
    "\061\006\060\014\045\016\056\034\100\051\064\053\103" +
    "\054\057\055\067\056\074\057\114\060\065\061\070\062" +
    "\062\063\053\064\050\065\111\070\073\072\117\073\055" +
    "\075\106\076\102\077\101\001\002\000\042\004\135\006" +
    "\125\007\131\010\140\012\136\017\273\020\126\023\132" +
    "\024\142\025\130\026\141\027\127\030\133\031\134\032" +
    "\124\033\143\001\002\000\060\005\061\006\060\014\045" +
    "\016\056\034\100\051\064\053\103\054\057\055\067\056" +
    "\074\057\114\060\065\061\070\062\062\063\053\064\050" +
    "\065\111\070\073\072\117\073\055\075\106\076\102\077" +
    "\101\001\002\000\064\005\uffaa\006\uffaa\014\uffaa\015\uffaa" +
    "\016\uffaa\034\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\055" +
    "\uffaa\056\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa" +
    "\064\uffaa\065\uffaa\070\uffaa\072\uffaa\073\uffaa\075\uffaa\076" +
    "\uffaa\077\uffaa\001\002\000\064\005\uffa8\006\uffa8\014\uffa8" +
    "\015\uffa8\016\uffa8\034\uffa8\051\uffa8\052\uffa8\053\uffa8\054" +
    "\uffa8\055\uffa8\056\uffa8\057\uffa8\060\uffa8\061\uffa8\062\uffa8" +
    "\063\uffa8\064\uffa8\065\uffa8\070\uffa8\072\uffa8\073\uffa8\075" +
    "\uffa8\076\uffa8\077\uffa8\001\002\000\042\004\135\005\277" +
    "\006\125\007\131\010\140\012\136\020\126\023\132\024" +
    "\142\025\130\026\141\027\127\030\133\031\134\032\124" +
    "\033\143\001\002\000\042\006\060\016\056\017\300\034" +
    "\100\060\065\061\070\062\062\063\053\064\050\065\111" +
    "\070\073\072\117\073\055\075\106\076\102\077\101\001" +
    "\002\000\060\005\061\006\060\014\045\016\056\034\100" +
    "\051\064\053\103\054\057\055\067\056\074\057\114\060" +
    "\065\061\070\062\062\063\053\064\050\065\111\070\073" +
    "\072\117\073\055\075\106\076\102\077\101\001\002\000" +
    "\042\004\135\006\125\007\131\010\140\012\136\017\302" +
    "\020\126\023\132\024\142\025\130\026\141\027\127\030" +
    "\133\031\134\032\124\033\143\001\002\000\060\005\061" +
    "\006\060\014\045\016\056\034\100\051\064\053\103\054" +
    "\057\055\067\056\074\057\114\060\065\061\070\062\062" +
    "\063\053\064\050\065\111\070\073\072\117\073\055\075" +
    "\106\076\102\077\101\001\002\000\064\005\uffa9\006\uffa9" +
    "\014\uffa9\015\uffa9\016\uffa9\034\uffa9\051\uffa9\052\uffa9\053" +
    "\uffa9\054\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9\061\uffa9" +
    "\062\uffa9\063\uffa9\064\uffa9\065\uffa9\070\uffa9\072\uffa9\073" +
    "\uffa9\075\uffa9\076\uffa9\077\uffa9\001\002\000\064\005\uffa7" +
    "\006\uffa7\014\uffa7\015\uffa7\016\uffa7\034\uffa7\051\uffa7\052" +
    "\uffa7\053\uffa7\054\uffa7\055\uffa7\056\uffa7\057\uffa7\060\uffa7" +
    "\061\uffa7\062\uffa7\063\uffa7\064\uffa7\065\uffa7\070\uffa7\072" +
    "\uffa7\073\uffa7\075\uffa7\076\uffa7\077\uffa7\001\002\000\042" +
    "\004\135\006\125\007\131\010\140\012\136\017\306\020" +
    "\126\023\132\024\142\025\130\026\141\027\127\030\133" +
    "\031\134\032\124\033\143\001\002\000\050\004\uff9a\005" +
    "\uff9a\006\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a\017\uff9a" +
    "\020\uff9a\021\uff9a\023\uff9a\024\uff9a\025\uff9a\026\uff9a\027" +
    "\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a\001\002\000\050" +
    "\004\uff88\005\uff88\006\uff88\007\uff88\010\uff88\011\uff88\012" +
    "\uff88\017\uff88\020\uff88\021\uff88\023\uff88\024\uff88\025\uff88" +
    "\026\uff88\027\uff88\030\uff88\031\uff88\032\uff88\033\uff88\001" +
    "\002\000\050\004\uff87\005\uff87\006\uff87\007\uff87\010\uff87" +
    "\011\uff87\012\uff87\017\uff87\020\uff87\021\uff87\023\uff87\024" +
    "\uff87\025\uff87\026\uff87\027\uff87\030\uff87\031\uff87\032\uff87" +
    "\033\uff87\001\002\000\016\017\uffe0\040\016\041\037\042" +
    "\033\043\024\072\020\001\002\000\006\011\317\017\uffde" +
    "\001\002\000\004\017\314\001\002\000\004\014\uffe7\001" +
    "\002\000\004\014\045\001\002\000\032\002\uffe6\003\uffe6" +
    "\015\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045" +
    "\uffe6\050\uffe6\071\uffe6\072\uffe6\001\002\000\014\040\016" +
    "\041\037\042\033\043\024\072\020\001\002\000\004\017" +
    "\uffe1\001\002\000\006\011\317\017\uffde\001\002\000\004" +
    "\017\uffdf\001\002\000\106\002\uffdd\003\uffdd\005\uffdd\006" +
    "\uffdd\014\uffdd\015\uffdd\016\uffdd\034\uffdd\040\uffdd\041\uffdd" +
    "\042\uffdd\043\uffdd\044\uffdd\045\uffdd\050\uffdd\051\uffdd\053" +
    "\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd" +
    "\062\uffdd\063\uffdd\064\uffdd\065\uffdd\070\uffdd\071\uffdd\072" +
    "\uffdd\073\uffdd\075\uffdd\076\uffdd\077\uffdd\001\002\000\106" +
    "\002\ufff3\003\ufff3\005\ufff3\006\ufff3\014\ufff3\015\ufff3\016" +
    "\ufff3\034\ufff3\040\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3" +
    "\045\ufff3\050\ufff3\051\ufff3\053\ufff3\054\ufff3\055\ufff3\056" +
    "\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3\063\ufff3\064\ufff3" +
    "\065\ufff3\070\ufff3\071\ufff3\072\ufff3\073\ufff3\075\ufff3\076" +
    "\ufff3\077\ufff3\001\002\000\004\014\uffcd\001\002\000\004" +
    "\014\327\001\002\000\020\015\uffca\040\016\041\037\042" +
    "\033\043\024\044\332\072\020\001\002\000\006\035\224" +
    "\072\351\001\002\000\004\015\350\001\002\000\004\072" +
    "\335\001\002\000\020\015\uffca\040\016\041\037\042\033" +
    "\043\024\044\332\072\020\001\002\000\004\015\uffcb\001" +
    "\002\000\006\016\uffc6\036\uffc0\001\002\000\004\036\345" +
    "\001\002\000\004\016\340\001\002\000\016\017\uffe0\040" +
    "\016\041\037\042\033\043\024\072\020\001\002\000\004" +
    "\017\342\001\002\000\004\005\uffc5\001\002\000\004\005" +
    "\344\001\002\000\020\015\uffc4\040\uffc4\041\uffc4\042\uffc4" +
    "\043\uffc4\044\uffc4\072\uffc4\001\002\000\004\005\uffbf\001" +
    "\002\000\004\005\347\001\002\000\020\015\uffbe\040\uffbe" +
    "\041\uffbe\042\uffbe\043\uffbe\044\uffbe\072\uffbe\001\002\000" +
    "\030\002\uffcc\003\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc" +
    "\044\uffcc\045\uffcc\050\uffcc\071\uffcc\072\uffcc\001\002\000" +
    "\006\016\uffc9\036\uffc3\001\002\000\004\016\357\001\002" +
    "\000\004\036\354\001\002\000\004\005\uffc2\001\002\000" +
    "\004\005\356\001\002\000\020\015\uffc1\040\uffc1\041\uffc1" +
    "\042\uffc1\043\uffc1\044\uffc1\072\uffc1\001\002\000\016\017" +
    "\uffe0\040\016\041\037\042\033\043\024\072\020\001\002" +
    "\000\004\017\361\001\002\000\004\005\uffc8\001\002\000" +
    "\004\005\363\001\002\000\020\015\uffc7\040\uffc7\041\uffc7" +
    "\042\uffc7\043\uffc7\044\uffc7\072\uffc7\001\002\000\030\002" +
    "\ufff5\003\ufff5\040\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5" +
    "\045\ufff5\050\ufff5\071\ufff5\072\ufff5\001\002\000\030\002" +
    "\ufff4\003\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4\044\ufff4" +
    "\045\ufff4\050\ufff4\071\ufff4\072\ufff4\001\002\000\006\035" +
    "\224\072\367\001\002\000\004\005\uffdc\001\002\000\010" +
    "\005\ufff2\016\uffeb\036\uffe5\001\002\000\004\016\375\001" +
    "\002\000\004\036\373\001\002\000\004\014\045\001\002" +
    "\000\032\002\uffe4\003\uffe4\015\uffe4\040\uffe4\041\uffe4\042" +
    "\uffe4\043\uffe4\044\uffe4\045\uffe4\050\uffe4\071\uffe4\072\uffe4" +
    "\001\002\000\016\017\uffe0\040\016\041\037\042\033\043" +
    "\024\072\020\001\002\000\004\017\377\001\002\000\004" +
    "\014\uffea\001\002\000\004\014\045\001\002\000\032\002" +
    "\uffe9\003\uffe9\015\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9" +
    "\044\uffe9\045\uffe9\050\uffe9\071\uffe9\072\uffe9\001\002\000" +
    "\004\002\000\001\002\000\030\002\ufffb\003\027\040\016" +
    "\041\037\042\033\043\024\044\036\045\015\050\030\071" +
    "\026\072\020\001\002\000\004\002\ufffc\001\002\000\010" +
    "\014\uffdb\046\uffdb\047\uffdb\001\002\000\010\014\uffd8\046" +
    "\u0107\047\uffd8\001\002\000\004\072\u0119\001\002\000\006" +
    "\014\uffd6\047\u010a\001\002\000\004\014\u0110\001\002\000" +
    "\004\072\u010b\001\002\000\006\011\u010c\014\uffd4\001\002" +
    "\000\004\072\u010e\001\002\000\004\014\uffd7\001\002\000" +
    "\006\011\u010c\014\uffd4\001\002\000\004\014\uffd5\001\002" +
    "\000\022\015\uffd1\040\016\041\037\042\033\043\024\044" +
    "\036\071\026\072\020\001\002\000\022\015\uffd0\040\uffd0" +
    "\041\uffd0\042\uffd0\043\uffd0\044\uffd0\071\uffd0\072\uffd0\001" +
    "\002\000\022\015\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3" +
    "\044\uffd3\071\uffd3\072\uffd3\001\002\000\022\015\uffce\040" +
    "\uffce\041\uffce\042\uffce\043\uffce\044\uffce\071\uffce\072\uffce" +
    "\001\002\000\022\015\uffcf\040\uffcf\041\uffcf\042\uffcf\043" +
    "\uffcf\044\uffcf\071\uffcf\072\uffcf\001\002\000\004\015\u0116" +
    "\001\002\000\030\002\uffda\003\uffda\040\uffda\041\uffda\042" +
    "\uffda\043\uffda\044\uffda\045\uffda\050\uffda\071\uffda\072\uffda" +
    "\001\002\000\022\015\uffd1\040\016\041\037\042\033\043" +
    "\024\044\036\071\026\072\020\001\002\000\004\015\uffd2" +
    "\001\002\000\006\014\uffd9\047\uffd9\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0118\000\010\002\003\021\006\050\004\001\001\000" +
    "\002\001\001\000\024\003\021\004\033\022\030\023\031" +
    "\024\020\025\024\032\016\033\034\051\022\001\001\000" +
    "\002\001\001\000\006\021\006\050\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\u0102\004\033\022\030\023\031\024\020\025\024" +
    "\032\016\033\034\035\u0101\051\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\051\365" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\054\040\057\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\043\001\001\000\002\001\001\000" +
    "\004\040\045\001\001\000\046\004\104\007\071\010\106" +
    "\011\074\012\062\013\051\014\046\015\112\016\053\022" +
    "\030\027\076\030\103\031\111\032\070\033\034\034\050" +
    "\041\075\051\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\027\304\030" +
    "\103\031\111\034\050\001\001\000\002\001\001\000\012" +
    "\027\261\030\103\031\111\034\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\027\243\030" +
    "\103\031\111\034\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\027\233\030\103\031\111\034\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\007" +
    "\071\010\106\011\074\012\062\013\051\014\046\015\112" +
    "\016\053\027\076\030\103\031\111\034\050\041\224\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\027\115\030" +
    "\103\031\111\034\050\001\001\000\004\042\214\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\020\121\027" +
    "\122\030\103\031\111\034\050\001\001\000\002\001\001" +
    "\000\004\074\136\001\001\000\012\027\212\030\103\031" +
    "\111\034\050\001\001\000\012\027\211\030\103\031\111" +
    "\034\050\001\001\000\012\027\207\030\103\031\111\034" +
    "\050\001\001\000\012\027\206\030\103\031\111\034\050" +
    "\001\001\000\012\027\205\030\103\031\111\034\050\001" +
    "\001\000\012\027\204\030\103\031\111\034\050\001\001" +
    "\000\012\027\203\030\103\031\111\034\050\001\001\000" +
    "\012\027\202\030\103\031\111\034\050\001\001\000\012" +
    "\027\201\030\103\031\111\034\050\001\001\000\012\027" +
    "\200\030\103\031\111\034\050\001\001\000\004\017\157" +
    "\001\001\000\004\042\150\001\001\000\012\027\146\030" +
    "\103\031\111\034\050\001\001\000\012\027\145\030\103" +
    "\031\111\034\050\001\001\000\012\027\144\030\103\031" +
    "\111\034\050\001\001\000\012\027\143\030\103\031\111" +
    "\034\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\027\151\030\103" +
    "\031\111\034\050\001\001\000\002\001\001\000\004\073" +
    "\152\001\001\000\004\042\153\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\020\162\027\122" +
    "\030\103\031\111\034\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\027\165\030\103\031\111\034\050" +
    "\001\001\000\002\001\001\000\012\027\167\030\103\031" +
    "\111\034\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\027\172\030\103\031\111\034\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\020\176\027\122\030\103\031\111\034\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\027\220\030\103\031\111\034\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\027\226\030" +
    "\103\031\111\034\050\001\001\000\002\001\001\000\012" +
    "\027\230\030\103\031\111\034\050\001\001\000\002\001" +
    "\001\000\032\007\071\010\232\011\074\012\062\013\051" +
    "\014\046\015\112\016\053\027\076\030\103\031\111\034" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\027\246\030" +
    "\103\031\111\034\050\001\001\000\002\001\001\000\032" +
    "\007\071\010\250\011\074\012\062\013\051\014\046\015" +
    "\112\016\053\027\076\030\103\031\111\034\050\001\001" +
    "\000\004\047\252\001\001\000\032\007\071\010\253\011" +
    "\074\012\062\013\051\014\046\015\112\016\053\027\076" +
    "\030\103\031\111\034\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\027\255\030\103\031\111\034\050" +
    "\001\001\000\002\001\001\000\004\051\257\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\027\264\030\103\031\111\034\050\001\001\000\012\027" +
    "\275\030\103\031\111\034\050\001\001\000\002\001\001" +
    "\000\012\027\266\030\103\031\111\034\050\001\001\000" +
    "\002\001\001\000\012\027\271\030\103\031\111\034\050" +
    "\001\001\000\032\007\071\010\274\011\074\012\062\013" +
    "\051\014\046\015\112\016\053\027\076\030\103\031\111" +
    "\034\050\001\001\000\002\001\001\000\032\007\071\010" +
    "\273\011\074\012\062\013\051\014\046\015\112\016\053" +
    "\027\076\030\103\031\111\034\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\027\300" +
    "\030\103\031\111\034\050\001\001\000\032\007\071\010" +
    "\303\011\074\012\062\013\051\014\046\015\112\016\053" +
    "\027\076\030\103\031\111\034\050\001\001\000\002\001" +
    "\001\000\032\007\071\010\302\011\074\012\062\013\051" +
    "\014\046\015\112\016\053\027\076\030\103\031\111\034" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\312\022\311\051\107\001\001\000\004" +
    "\036\317\001\001\000\002\001\001\000\004\055\314\001" +
    "\001\000\004\007\315\001\001\000\002\001\001\000\006" +
    "\022\320\051\107\001\001\000\002\001\001\000\004\036" +
    "\321\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\062\325\001\001\000\002\001\001\000" +
    "\010\026\332\037\330\051\327\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\026\332\037" +
    "\333\051\327\001\001\000\002\001\001\000\006\065\336" +
    "\071\335\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\340\022\311\051\107\001\001\000\002\001\001" +
    "\000\004\066\342\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\072\345\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\063\351\067\352\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\070\354" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\357\022\311\051\107\001\001\000\002\001\001\000\004" +
    "\064\361\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\052\370\056\371\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\373\001\001\000\002" +
    "\001\001\000\010\005\375\022\311\051\107\001\001\000" +
    "\002\001\001\000\004\053\377\001\001\000\004\007\u0100" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\003" +
    "\u0102\004\033\022\030\023\031\024\020\025\024\032\016" +
    "\033\034\035\u0103\051\022\001\001\000\002\001\001\000" +
    "\004\060\u0105\001\001\000\004\043\u0107\001\001\000\002" +
    "\001\001\000\004\044\u0108\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\045\u010c\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\045\u010e\001\001\000\002\001" +
    "\001\000\022\004\u0110\006\u0111\022\030\023\u0113\032\u0112" +
    "\033\034\046\u0114\051\022\001\001\000\002\001\001\000" +
    "\004\061\u0116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\004\u0110\006" +
    "\u0111\022\030\023\u0113\032\u0112\033\034\046\u0117\051\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public int numErr = 0;
	public void syntax_error(Symbol error){
		System.out.println("Error Sintaxis 	                              Linea:" + (error.left+1) + " Columna:" + (error.right+1) + " Valor:" + error.value);
		numErr++;
	}
	
	public void unrecovered_syntax_error(Symbol error) throws java.lang.Exception{
		
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	public List<Symbols> table = new ArrayList<Symbols>(); 
	Symbols aux = new Symbols("", -1, ""); 
	int params = 0; 
	int globalScope = 0; 
	int currentClass = 0; 
	boolean isFunction = false; 
	
	public boolean exist(String id){ 
		for(int i = 0; i < table.size(); i++){
			Symbols aux = table.get(i); 
			if(aux.identifier.equals(id) && aux.scope == globalScope){
				return true; 
			}
	 							
		}
		return false; 
	}
	
	public boolean allScopes(String id){
			for(int i = 0; i < table.size(); i++){
			Symbols aux = table.get(i); 
			for(int j = globalScope; j >= 0 ; j--){
				if(aux.identifier.equals(id) && aux.scope == j){
					return true; 
				}
			}		 							
		}
		return false; 
	}
	
	public int symPos(String id){
			for(int i = 0; i < table.size(); i++){
			Symbols aux = table.get(i); 
			for(int j = globalScope; j >= 0 ; j--){
				if(aux.identifier.equals(id) && aux.scope == j){
					return i; 
				}
			}		 							
		}
		return -1;
	}
	
	public void writeTable() throws IOException{
		String path = new File(".").getAbsolutePath();
		PrintWriter out = new PrintWriter(new FileWriter(path+"\\sym.txt"));
		for(int i = 0; i < table.size(); i++){
			Symbols aux = table.get(i); 
			out.println("id: "+ aux.identifier + "  value: " +  aux.value + "  type: " + aux.type + "  Ambito: " + aux.scope + " Pertenece: " + aux.father); 
		}
		out.close(); 
	}
	
	public String getType (Object val){
        if (val instanceof Integer)
            return "int";
        else if (val instanceof Double)
            return "double";
        else if (val instanceof String)
            return getVarType(val.toString()); 
        else if (val instanceof Boolean)
            return "bool";
        else 
            return "obj";
    }
    
	public String getVarType(String id){
		if(allScopes(id)){
			return table.get(symPos(id)).type; 
		}else
		return "string"; 
	}
	
	boolean tryParseInt(String value) {  
     try {  
         Integer.parseInt(value);  
         return true;  
      } catch (NumberFormatException e) {  
         return false;  
      }  
	}
	
	 boolean tryParseDouble(String value) {  
     try {  
         Double.parseDouble(value);  
         return true;  
      } catch (NumberFormatException e) {  
         return false;  
      }  
	}
	
	 boolean tryParseBool(String value) {  
     	
     	if(value.equals("true") || value.equals("false")){
     		return true; 
     	}else{
     		return false; 
     	}  
	}
	

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Constant ::= NULL 
            {
              Object RESULT =null;
		RESULT = "null";  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Constant ::= STRINGC 
            {
              Object RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Constant ::= BOOLC 
            {
              Object RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		boolean bc = (boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = bc;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Constant ::= DOUBLEC 
            {
              Object RESULT =null;
		int dcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double dc = (double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = dc;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Constant ::= INTC 
            {
              Object RESULT =null;
		int intcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int intcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		int intc = (int)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = intc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Actuals ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Actuals",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Actuals ::= Expr NT$18 ReE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Actuals",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // NT$18 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
System.out.println(val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // LibCall ::= SETBYTE LPAREN Expr COMMA Expr RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LibCall",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // LibCall ::= GETBYTE LPAREN Expr RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LibCall",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Call ::= Expr POINT LibCall PARENS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Call",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Call ::= Expr POINT ID PARENS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Call",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Call ::= ID PARENS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Call",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Call ::= Expr POINT LibCall LPAREN Actuals RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Call",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Call ::= Expr POINT ID LPAREN Actuals RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Call",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Call ::= ID LPAREN Actuals RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Call",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // LValue ::= Expr LBRACE Expr RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LValue",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // LValue ::= Expr POINT ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LValue",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // LValue ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					if(allScopes(id)){
						RESULT = id; }else{
							System.out.println("El identificador no existe");
						} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LValue",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Expr ::= MALLOC LPAREN Expr RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Expr ::= READLINE PARENS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Expr ::= READINT PARENS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Expr ::= NEWARRAY LPAREN Expr COMMA Type RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Expr ::= NEW LPAREN ID RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Expr ::= NEG Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        	String type1 = getType(e1); 
			if(type1.equals("bool")){
				if(!tryParseBool(e1.toString())){
        			e1 = (Object)(Boolean.parseBoolean(table.get(symPos(e1.toString())).value)); 
        		}
        		RESULT = (Object)(!Boolean.parseBoolean(e1.toString()));  
        	}else{
        		System.out.println("No se puede operar ! con " + type1 ); 
        	}
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Expr ::= Expr OR Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        	String type1 = getType(e1); 
        	String type2 = getType(e2); 
			if(type1.equals("bool") && type2.equals("bool")){
				if(!tryParseBool(e1.toString())){
        			e1 = (Object)(Boolean.parseBoolean(table.get(symPos(e1.toString())).value)); 
        		}
        		if(!tryParseBool(e2.toString())){
        			e2 = (Object)(Boolean.parseBoolean(table.get(symPos(e2.toString())).value)); 
        		}
        		RESULT = (Object)(Boolean.parseBoolean(e1.toString()) || Boolean.parseBoolean(e2.toString()));  
        	}else{
        		System.out.println("No se puede operar " + type1 + " con " + type2); 
        	}
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Expr ::= Expr AND Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        	String type1 = getType(e1); 
        	String type2 = getType(e2); 
			if(type1.equals("bool") && type2.equals("bool")){
				if(!tryParseBool(e1.toString())){
        			e1 = (Object)(Boolean.parseBoolean(table.get(symPos(e1.toString())).value)); 
        		}
        		if(!tryParseBool(e2.toString())){
        			e2 = (Object)(Boolean.parseBoolean(table.get(symPos(e2.toString())).value)); 
        		}
        		RESULT = (Object)(Boolean.parseBoolean(e1.toString()) && Boolean.parseBoolean(e2.toString()));  
        	}else{
        		System.out.println("No se puede operar " + type1 + " con " + type2); 
        	}
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Expr ::= Expr NEQ Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        	String type1 = getType(e1); 
        	String type2 = getType(e2); 
        	if(type1.equals("string") && type2.equals("string")){
        		if(e1.toString().endsWith("\"")){
        			e1 = (Object)(e1.toString().substring(1, e1.toString().length() -1));
        		}else{
        			e1 = (Object)(table.get(symPos(e1.toString())).value);
        		}
        		if(e2.toString().endsWith("\"")){
        			e2 = (Object)(e2.toString().substring(1, e2.toString().length() -1)); 
        		}else{
        			e2 = (Object)(table.get(symPos(e2.toString())).value);
        		}
        		RESULT = !e1.toString().equals(e2.toString());         		
        		System.out.println("string" + RESULT); 
        	}else if(type1.equals("int") && type2.equals("int")){
        		if(!tryParseInt(e1.toString())){
        			e1 = (Object)(Integer.parseInt(table.get(symPos(e1.toString())).value)); 
        		}
        		if(!tryParseInt(e2.toString())){
        			e2 = (Object)(Integer.parseInt(table.get(symPos(e2.toString())).value)); 
        		}
        		RESULT = (Object)(Integer.parseInt(e1.toString()) != Integer.parseInt(e2.toString())); 
        		System.out.println("int" + RESULT); 
        	}
        	else if((type1.equals("int") || type1.equals("double")) && (type2.equals("double") || type2.equals("int"))){
        		if(!tryParseDouble(e1.toString())){
        			e1 = (Object)(Double.parseDouble(table.get(symPos(e1.toString())).value));
        		}
        		if(!tryParseDouble(e2.toString())){
        			e2 = (Object)(Double.parseDouble(table.get(symPos(e2.toString())).value));
        		}
        		RESULT = (Object)(Double.parseDouble(e1.toString()) != Double.parseDouble(e2.toString()));
        		System.out.println("double" + RESULT); 
        	}else if(type1.equals("bool") && type2.equals("bool") ){
        		if(!tryParseBool(e1.toString())){
        			e1 = (Object)(Boolean.parseBoolean(table.get(symPos(e1.toString())).value)); 
        		}
        		if(!tryParseBool(e2.toString())){
        			e2 = (Object)(Boolean.parseBoolean(table.get(symPos(e2.toString())).value)); 
        		}
        		RESULT = (Object)(Boolean.parseBoolean(e1.toString()) != Boolean.parseBoolean(e2.toString())); 
        		System.out.println("bool" + RESULT); 
        	
        	}
        	else{
        		System.out.println("No se puede operar " + type1 + " con " + type2); 
        	}
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Expr ::= Expr CMP Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        	String type1 = getType(e1); 
        	String type2 = getType(e2); 
        	if(type1.equals("string") && type2.equals("string")){
        		if(e1.toString().endsWith("\"")){
        			e1 = (Object)(e1.toString().substring(1, e1.toString().length() -1));
        		}else{
        			e1 = (Object)(table.get(symPos(e1.toString())).value);
        		}
        		if(e2.toString().endsWith("\"")){
        			e2 = (Object)(e2.toString().substring(1, e2.toString().length() -1)); 
        		}else{
        			e2 = (Object)(table.get(symPos(e2.toString())).value);
        		}
        		RESULT = e1.toString().equals(e2.toString());         		
        		System.out.println("string" + RESULT); 
        	}else if(type1.equals("int") && type2.equals("int")){
        		if(!tryParseInt(e1.toString())){
        			e1 = (Object)(Integer.parseInt(table.get(symPos(e1.toString())).value)); 
        		}
        		if(!tryParseInt(e2.toString())){
        			e2 = (Object)(Integer.parseInt(table.get(symPos(e2.toString())).value)); 
        		}
        		RESULT = (Object)(Integer.parseInt(e1.toString()) == Integer.parseInt(e2.toString())); 
        		System.out.println("int" + RESULT); 
        	}
        	else if((type1.equals("int") || type1.equals("double")) && (type2.equals("double") || type2.equals("int"))){
        		if(!tryParseDouble(e1.toString())){
        			e1 = (Object)(Double.parseDouble(table.get(symPos(e1.toString())).value));
        		}
        		if(!tryParseDouble(e2.toString())){
        			e2 = (Object)(Double.parseDouble(table.get(symPos(e2.toString())).value));
        		}
        		RESULT = (Object)(Double.parseDouble(e1.toString()) == Double.parseDouble(e2.toString()));
        		System.out.println("double" + RESULT); 
        	}else if(type1.equals("bool") && type2.equals("bool") ){
        		if(!tryParseBool(e1.toString())){
        			e1 = (Object)(Boolean.parseBoolean(table.get(symPos(e1.toString())).value)); 
        		}
        		if(!tryParseBool(e2.toString())){
        			e2 = (Object)(Boolean.parseBoolean(table.get(symPos(e2.toString())).value)); 
        		}
        		RESULT = (Object)(Boolean.parseBoolean(e1.toString()) == Boolean.parseBoolean(e2.toString())); 
        		System.out.println("bool" + RESULT); 
        	
        	}
        	else{
        		System.out.println("No se puede operar " + type1 + " con " + type2); 
        	}
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Expr ::= Expr GTE Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        	String type1 = getType(e1); 
        	String type2 = getType(e2); 
			if(type1.equals("int") && type2.equals("int")){
        		if(!tryParseInt(e1.toString())){
        			e1 = (Object)(Integer.parseInt(table.get(symPos(e1.toString())).value)); 
        		}
        		if(!tryParseInt(e2.toString())){
        			e2 = (Object)(Integer.parseInt(table.get(symPos(e2.toString())).value)); 
        		}
        		RESULT = (Object)(Integer.parseInt(e1.toString()) >= Integer.parseInt(e2.toString())); 
        		System.out.println("int" + RESULT); 
        	}
        	else if((type1.equals("int") || type1.equals("double")) && (type2.equals("double") || type2.equals("int"))){
        		if(!tryParseDouble(e1.toString())){
        			e1 = (Object)(Double.parseDouble(table.get(symPos(e1.toString())).value));
        		}
        		if(!tryParseDouble(e2.toString())){
        			e2 = (Object)(Double.parseDouble(table.get(symPos(e2.toString())).value));
        		}
        		RESULT = (Object)(Double.parseDouble(e1.toString()) >= Double.parseDouble(e2.toString()));
        		System.out.println("double" + RESULT); 
        	}else{
        		System.out.println("No se puede operar " + type1 + " con " + type2); 
        	}
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Expr ::= Expr GT Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        	String type1 = getType(e1); 
        	String type2 = getType(e2); 
			if(type1.equals("int") && type2.equals("int")){
        		if(!tryParseInt(e1.toString())){
        			e1 = (Object)(Integer.parseInt(table.get(symPos(e1.toString())).value)); 
        		}
        		if(!tryParseInt(e2.toString())){
        			e2 = (Object)(Integer.parseInt(table.get(symPos(e2.toString())).value)); 
        		}
        		RESULT = (Object)(Integer.parseInt(e1.toString()) > Integer.parseInt(e2.toString())); 
        		System.out.println("int" + RESULT); 
        	}
        	else if((type1.equals("int") || type1.equals("double")) && (type2.equals("double") || type2.equals("int"))){
        		if(!tryParseDouble(e1.toString())){
        			e1 = (Object)(Double.parseDouble(table.get(symPos(e1.toString())).value));
        		}
        		if(!tryParseDouble(e2.toString())){
        			e2 = (Object)(Double.parseDouble(table.get(symPos(e2.toString())).value));
        		}
        		RESULT = (Object)(Double.parseDouble(e1.toString()) > Double.parseDouble(e2.toString()));
        		System.out.println("double" + RESULT); 
        	}else{
        		System.out.println("No se puede operar " + type1 + " con " + type2); 
        	}
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Expr ::= Expr LTE Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        	String type1 = getType(e1); 
        	String type2 = getType(e2); 
			if(type1.equals("int") && type2.equals("int")){
        		if(!tryParseInt(e1.toString())){
        			e1 = (Object)(Integer.parseInt(table.get(symPos(e1.toString())).value)); 
        		}
        		if(!tryParseInt(e2.toString())){
        			e2 = (Object)(Integer.parseInt(table.get(symPos(e2.toString())).value)); 
        		}
        		RESULT = (Object)(Integer.parseInt(e1.toString()) <= Integer.parseInt(e2.toString())); 
        		System.out.println("int" + RESULT); 
        	}
        	else if((type1.equals("int") || type1.equals("double")) && (type2.equals("double") || type2.equals("int"))){
        		if(!tryParseDouble(e1.toString())){
        			e1 = (Object)(Double.parseDouble(table.get(symPos(e1.toString())).value));
        		}
        		if(!tryParseDouble(e2.toString())){
        			e2 = (Object)(Double.parseDouble(table.get(symPos(e2.toString())).value));
        		}
        		RESULT = (Object)(Double.parseDouble(e1.toString()) <= Double.parseDouble(e2.toString()));
        		System.out.println("double" + RESULT); 
        	}else{
        		System.out.println("No se puede operar " + type1 + " con " + type2); 
        	}
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Expr ::= Expr LT Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        	String type1 = getType(e1); 
        	String type2 = getType(e2); 
			if(type1.equals("int") && type2.equals("int")){
        		if(!tryParseInt(e1.toString())){
        			e1 = (Object)(Integer.parseInt(table.get(symPos(e1.toString())).value)); 
        		}
        		if(!tryParseInt(e2.toString())){
        			e2 = (Object)(Integer.parseInt(table.get(symPos(e2.toString())).value)); 
        		}
        		RESULT = (Object)(Integer.parseInt(e1.toString()) < Integer.parseInt(e2.toString())); 
        		System.out.println("int" + RESULT); 
        	}
        	else if((type1.equals("int") || type1.equals("double")) && (type2.equals("double") || type2.equals("int"))){
        		if(!tryParseDouble(e1.toString())){
        			e1 = (Object)(Double.parseDouble(table.get(symPos(e1.toString())).value));
        		}
        		if(!tryParseDouble(e2.toString())){
        			e2 = (Object)(Double.parseDouble(table.get(symPos(e2.toString())).value));
        		}
        		RESULT = (Object)(Double.parseDouble(e1.toString()) < Double.parseDouble(e2.toString()));
        		System.out.println("double" + RESULT); 
        	}else{
        		System.out.println("No se puede operar " + type1 + " con " + type2); 
        	}
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Expr ::= MINUS Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        	String type1 = getType(e1); 
			if(type1.equals("int")){
        		if(!tryParseInt(e1.toString())){
        			e1 = (Object)(Integer.parseInt(table.get(symPos(e1.toString())).value)); 
        		}
        		RESULT = (Object)(-Integer.parseInt(e1.toString())); 
        		System.out.println("int" + RESULT); 
        	}
        	else if(type1.equals("double")){
        		if(!tryParseDouble(e1.toString())){
        			e1 = (Object)(Double.parseDouble(table.get(symPos(e1.toString())).value));
        		}
        		RESULT = (Object)(-Double.parseDouble(e1.toString()));
        		System.out.println("double" + RESULT); 
        	}else{
        		System.out.println("El operando  " + type1  + " no es un numero"); 
        	}
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Expr ::= Expr MOD Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        	String type1 = getType(e1); 
        	String type2 = getType(e2); 
			if(type1.equals("int") && type2.equals("int")){
        		if(!tryParseInt(e1.toString())){
        			e1 = (Object)(Integer.parseInt(table.get(symPos(e1.toString())).value)); 
        		}
        		if(!tryParseInt(e2.toString())){
        			e2 = (Object)(Integer.parseInt(table.get(symPos(e2.toString())).value)); 
        		}
        		RESULT = (Object)(Integer.parseInt(e1.toString()) % Integer.parseInt(e2.toString())); 
        		System.out.println("int" + RESULT); 
        	}
        	else if((type1.equals("int") || type1.equals("double")) && (type2.equals("double") || type2.equals("int"))){
        		if(!tryParseDouble(e1.toString())){
        			e1 = (Object)(Double.parseDouble(table.get(symPos(e1.toString())).value));
        		}
        		if(!tryParseDouble(e2.toString())){
        			e2 = (Object)(Double.parseDouble(table.get(symPos(e2.toString())).value));
        		}
        		RESULT = (Object)(Double.parseDouble(e1.toString()) % Double.parseDouble(e2.toString()));
        		System.out.println("double" + RESULT); 
        	}else{
        		System.out.println("No se puede operar " + type1 + " con " + type2); 
        	}
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Expr ::= Expr DIV Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        	String type1 = getType(e1); 
        	String type2 = getType(e2); 
        	if(!e2.toString().equals("0")){
				if(type1.equals("int") && type2.equals("int")){
	        		if(!tryParseInt(e1.toString())){
	        			e1 = (Object)(Integer.parseInt(table.get(symPos(e1.toString())).value)); 
	        		}
	        		if(!tryParseInt(e2.toString())){
	        			e2 = (Object)(Integer.parseInt(table.get(symPos(e2.toString())).value)); 
	        		}
	        		RESULT = (Object)(Integer.parseInt(e1.toString()) / Integer.parseInt(e2.toString())); 
	        		System.out.println("int" + RESULT); 
	        	}
	        	else if((type1.equals("int") || type1.equals("double")) && (type2.equals("double") || type2.equals("int"))){
	        		if(!tryParseDouble(e1.toString())){
	        			e1 = (Object)(Double.parseDouble(table.get(symPos(e1.toString())).value));
	        		}
	        		if(!tryParseDouble(e2.toString())){
	        			e2 = (Object)(Double.parseDouble(table.get(symPos(e2.toString())).value));
	        		}
	        		RESULT = (Object)(Double.parseDouble(e1.toString()) / Double.parseDouble(e2.toString()));
	        		System.out.println("double" + RESULT); 
	        	}else{
	        		System.out.println("No se puede operar " + type1 + " con " + type2); 
	        	}
        	}else{
        	
    			System.out.println("La division sobre cero no esta definida"); 
        	}
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Expr ::= Expr MULT Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        	String type1 = getType(e1); 
        	String type2 = getType(e2); 
			if(type1.equals("int") && type2.equals("int")){
        		if(!tryParseInt(e1.toString())){
        			e1 = (Object)(Integer.parseInt(table.get(symPos(e1.toString())).value)); 
        		}
        		if(!tryParseInt(e2.toString())){
        			e2 = (Object)(Integer.parseInt(table.get(symPos(e2.toString())).value)); 
        		}
        		RESULT = (Object)(Integer.parseInt(e1.toString()) * Integer.parseInt(e2.toString())); 
        		System.out.println("int" + RESULT); 
        	}
        	else if((type1.equals("int") || type1.equals("double")) && (type2.equals("double") || type2.equals("int"))){
        		if(!tryParseDouble(e1.toString())){
        			e1 = (Object)(Double.parseDouble(table.get(symPos(e1.toString())).value));
        		}
        		if(!tryParseDouble(e2.toString())){
        			e2 = (Object)(Double.parseDouble(table.get(symPos(e2.toString())).value));
        		}
        		RESULT = (Object)(Double.parseDouble(e1.toString()) * Double.parseDouble(e2.toString()));
        		System.out.println("double" + RESULT); 
        	}else{
        		System.out.println("No se puede operar " + type1 + " con " + type2); 
        	}
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Expr ::= Expr MINUS Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        	String type1 = getType(e1); 
        	String type2 = getType(e2); 
			if(type1.equals("int") && type2.equals("int")){
        		if(!tryParseInt(e1.toString())){
        			e1 = (Object)(Integer.parseInt(table.get(symPos(e1.toString())).value)); 
        		}
        		if(!tryParseInt(e2.toString())){
        			e2 = (Object)(Integer.parseInt(table.get(symPos(e2.toString())).value)); 
        		}
        		RESULT = (Object)(Integer.parseInt(e1.toString()) - Integer.parseInt(e2.toString())); 
        		System.out.println("int" + RESULT); 
        	}
        	else if((type1.equals("int") || type1.equals("double")) && (type2.equals("double") || type2.equals("int"))){
        		if(!tryParseDouble(e1.toString())){
        			e1 = (Object)(Double.parseDouble(table.get(symPos(e1.toString())).value));
        		}
        		if(!tryParseDouble(e2.toString())){
        			e2 = (Object)(Double.parseDouble(table.get(symPos(e2.toString())).value));
        		}
        		RESULT = (Object)(Double.parseDouble(e1.toString()) - Double.parseDouble(e2.toString()));
        		System.out.println("double" + RESULT); 
        	}else{
        		System.out.println("No se puede operar " + type1 + " con " + type2); 
        	}
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Expr ::= Expr PLUS Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        	String type1 = getType(e1); 
        	String type2 = getType(e2); 
        	if(type1.equals("string") && type2.equals("string")){
        		if(e1.toString().endsWith("\"")){
        			e1 = (Object)(e1.toString().substring(1, e1.toString().length() -1));
        		}else{
        			e1 = (Object)(table.get(symPos(e1.toString())).value);
        		}
        		if(e2.toString().endsWith("\"")){
        			e2 = (Object)(e2.toString().substring(1, e2.toString().length() -1)); 
        		}else{
        			e2 = (Object)(table.get(symPos(e2.toString())).value);
        		}
        		RESULT = e1.toString() + e2.toString();         		
        		System.out.println("string" + RESULT); 
        	}else if(type1.equals("int") && type2.equals("int")){
        		if(!tryParseInt(e1.toString())){
        			e1 = (Object)(Integer.parseInt(table.get(symPos(e1.toString())).value)); 
        		}
        		if(!tryParseInt(e2.toString())){
        			e2 = (Object)(Integer.parseInt(table.get(symPos(e2.toString())).value)); 
        		}
        		RESULT = (Object)(Integer.parseInt(e1.toString()) + Integer.parseInt(e2.toString())); 
        		System.out.println("int" + RESULT); 
        	}
        	else if((type1.equals("int") || type1.equals("double")) && (type2.equals("double") || type2.equals("int"))){
        		if(!tryParseDouble(e1.toString())){
        			e1 = (Object)(Double.parseDouble(table.get(symPos(e1.toString())).value));
        		}
        		if(!tryParseDouble(e2.toString())){
        			e2 = (Object)(Double.parseDouble(table.get(symPos(e2.toString())).value));
        		}
        		RESULT = (Object)(Double.parseDouble(e1.toString()) + Double.parseDouble(e2.toString()));
        		System.out.println("double" + RESULT); 
        	}else{
        		System.out.println("No se puede operar " + type1 + " con " + type2); 
        	}
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Expr ::= LPAREN Expr RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Expr ::= Call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Expr ::= THIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Expr ::= LValue 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Expr ::= Constant 
            {
              Object RESULT =null;
		int consleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int consright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cons = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = cons; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Expr ::= LValue EQUAL Expr 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				System.out.println(val); 
				RESULT = e; 
				if(e != null){
					if((getType(e).equals("double") && getVarType(val.toString()).equals("int")) || !(getType(e).equals(getVarType(val.toString())))){
						System.out.println("No se puede convertir de " + getType(e) + " a " + getVarType(val.toString()));
					}else{
						table.get(symPos(val.toString())).value = e.toString();						 
					}
				}
				writeTable(); 
				System.out.println(val +" = " + String.valueOf(RESULT)); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ReE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReE",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ReE ::= COMMA Expr NT$17 ReE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReE",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$17 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
System.out.println(val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // PrintStmt ::= PRINT LPAREN Expr ReE RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrintStmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // BreakStmt ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BreakStmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ReturnStmt ::= RETURN SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReturnStmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ReturnStmt ::= RETURN Expr SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReturnStmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ForStmt ::= FOR LPAREN SEMICOLON Expr SEMICOLON RPAREN Stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ForStmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ForStmt ::= FOR LPAREN Expr SEMICOLON Expr SEMICOLON RPAREN Stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ForStmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ForStmt ::= FOR LPAREN SEMICOLON Expr SEMICOLON Expr RPAREN Stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ForStmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ForStmt ::= FOR LPAREN Expr SEMICOLON Expr SEMICOLON Expr RPAREN Stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ForStmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // WhileStmt ::= WHILE LPAREN Expr RPAREN Stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ReIF ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReIF",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ReIF ::= ELSE Stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReIF",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // IfStmt ::= IF LPAREN Expr RPAREN Stmt ReIF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStmt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Stmt ::= StmtBlock 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Stmt ::= PrintStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Stmt ::= ReturnStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Stmt ::= BreakStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Stmt ::= ForStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Stmt ::= WhileStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Stmt ::= IfStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Stmt ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Stmt ::= Expr SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ReS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReS",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ReS ::= Stmt ReS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReS",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ReVD ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReVD",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ReVD ::= ReVD VariableDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReVD",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ReVD ::= ReVD ConstantDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReVD",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // StmtBlock ::= LBRACKET ReVD ReS RBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtBlock",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Prototype ::= VOID ID NT$15 PARENS NT$16 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Prototype",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$16 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
globalScope--;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$15 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

    		if(!exist(id)){
    			Symbols aux = new Symbols(id, globalScope, "void"); 
    			table.add(aux); 
    			globalScope++; 
    			writeTable();}else{
    				System.out.println("El procedimiento ya existe"); 
    			}
    	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Prototype ::= Type ID NT$13 PARENS NT$14 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Prototype",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$14 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
globalScope--;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$13 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

        	if(!exist(id)){
        		Symbols aux = new Symbols(id, globalScope, type);
        		table.add(aux); 
        		globalScope++;
        		writeTable();} else{
        			System.out.println("La funcion ya existe"); 
        		}       	
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Prototype ::= VOID ID NT$11 LPAREN Formals RPAREN NT$12 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Prototype",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
globalScope--; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$11 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

        	if(!exist(id)){
        		Symbols aux = new Symbols(id, globalScope, "void");
        		aux.declaration = true;  
        		table.add(aux); 
        		globalScope++;
        		params = table.size() -1; 
        		writeTable();}else{
        			System.out.println("El procedimiento ya existe"); 
        		}        
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Prototype ::= Type ID NT$9 LPAREN Formals RPAREN NT$10 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Prototype",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
globalScope--;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$9 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

			if(!exist(id)){
				Symbols aux = new Symbols(id, globalScope, type);
				aux.declaration = true; 
				table.add(aux); 
				globalScope++; 
				params = table.size() -1; 
				writeTable();}else{
					System.out.println("La funcion ya existe"); 
				}
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // RePR ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RePR",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // RePR ::= Prototype RePR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RePR",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // InterfaceDecl ::= INTERFACE ID NT$8 LBRACKET RePR RBRACKET 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		globalScope--; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InterfaceDecl",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$8 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

				if(!exist(id)){
					Symbols aux = new Symbols(id, globalScope, "interface");
					aux.declaration = true; 
					table.add(aux); 
					globalScope++; 
					writeTable(); 
				}else{
					System.out.println("La interfaz ya existe"); 
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Field ::= ConstantDecl 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Field",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Field ::= FunctionDecl 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = val; params = currentClass;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Field",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Field ::= VariableDecl 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = val; System.out.println(val);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Field",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ReC4 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReC4",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ReC4 ::= Field NT$7 ReC4 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReC4",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$7 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ReC3 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReC3",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ReC3 ::= COMMA ID ReC3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReC3",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ReC2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReC2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ReC2 ::= IMPLEMENTS ID ReC3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReC2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ReC1 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReC1",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ReC1 ::= EXTENDS ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReC1",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ClassDecl ::= CLASS ID NT$6 ReC1 ReC2 LBRACKET ReC4 RBRACKET 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		params = 0; globalScope--; System.out.println(globalScope);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDecl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$6 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

				if(!exist(id)){ 
					Symbols aux = new Symbols(id, globalScope, "class");
					aux.declaration = true; 
					table.add(aux); 
					globalScope++; 
					params = table.size() -1; 
					currentClass = params; 
					writeTable();
				}else{
					System.out.println("La clase ya existe"); 
				} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // AConstant ::= CONST Type ID 
            {
              Object RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object decl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			if(!exist(id)){
				Symbols aux = new Symbols(id, globalScope, type);
				if(type.equals("int") || type.equals("double")){
					aux.value = "0"; 
				}
				table.add(aux); 
			}else{
				System.out.println("La constante ya existe"); 
			}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AConstant",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ConstantDecl ::= AConstant SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstantDecl",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ReV ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReV",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ReV ::= COMMA Variable ReV 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReV",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Formals ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Formals",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Formals ::= Variable ReV 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Formals",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FunctionDecl ::= VOID ID NT$5 PARENS StmtBlock 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		globalScope--;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDecl",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$5 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

        if(!exist(id)){
	        Symbols aux = new Symbols(id, globalScope, "void");
			if(table.get(params).declaration){
				aux.father = table.get(params).identifier; 
			}
	        aux.declaration = true;
	        table.add(aux); 
	        globalScope++; 
			writeTable();} else{
			System.out.println("El procedimiento ya existe"); 
		} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FunctionDecl ::= Type ID NT$4 PARENS StmtBlock 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		globalScope--; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDecl",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$4 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

        if(!exist(id)){
	        Symbols aux = new Symbols(id, globalScope, type);
			if(table.get(params).declaration){
				aux.father = table.get(params).identifier; 
			}
	        aux.declaration = true;
	        table.add(aux); 
	        globalScope++; 
			writeTable();}else{
			System.out.println("La funcion ya existe"); 
		} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FunctionDecl ::= VOID ID NT$2 LPAREN Formals RPAREN NT$3 StmtBlock 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		globalScope--;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDecl",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
table.get(params).declaration = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$2 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

    	if(!exist(id)){
	        Symbols aux = new Symbols(id, globalScope, "void");
			if(table.get(params).declaration){
				aux.father = table.get(params).identifier; 
			}
	        aux.declaration = true;
	        table.add(aux); 
	        params = table.size() -1;
			globalScope++;
			writeTable();  
		}else{
			System.out.println("El procedimiento ya existe"); 
		}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FunctionDecl ::= Type ID NT$0 LPAREN Formals RPAREN NT$1 StmtBlock 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		globalScope--;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDecl",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
table.get(params).declaration = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$0 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

		if(!exist(id)){
			Symbols aux = new Symbols(id, globalScope, type);
			if(table.get(params).declaration){
				aux.father = table.get(params).identifier; 
			}
			aux.declaration = true;
			table.add(aux); 
			globalScope++;
			params = table.size() -1;    
			writeTable();
		}else{
			System.out.println("la funcion ya existe"); 
		} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Type ::= Type BRACES 
            {
              String RESULT =null;
		int _typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = (String)_type + "[]";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Type ::= ID 
            {
              String RESULT =null;
		int _idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int _idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String _id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =(String) _id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Type ::= STRING 
            {
              String RESULT =null;
		int _stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int _stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object _string = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = (String)_string;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= BOOL 
            {
              String RESULT =null;
		int _boolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int _boolright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object _bool = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = (String)_bool; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= DOUBLE 
            {
              String RESULT =null;
		int _doubleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int _doubleright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object _double = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=(String) _double;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= INT 
            {
              String RESULT =null;
		int _intleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int _intright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object _int = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= (String)_int; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Variable ::= Type ID 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			 
			RESULT = type+ " "+id;
			if(!exist(id)){
				Symbols aux = new Symbols(id, globalScope, type);
				if( !table.isEmpty()  && table.get(params).declaration){
					aux.father = table.get(params).identifier; 
				}
				if(type.equals("int") || type.equals("double")){
					aux.value = "0"; 
				}
				table.add(aux); 
				writeTable(); 
				System.out.println(type+ " " + id +" " + aux.father);
			}else{
				System.out.println("la variable ya existe");} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variable",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VariableDecl ::= Variable SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableDecl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Decl ::= error RBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Decl ::= error SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Decl ::= ConstantDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Decl ::= InterfaceDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Decl ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Decl ::= FunctionDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Decl ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ReP ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReP",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ReP ::= Decl ReP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReP",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Include ::= SHARP INCLUDES LT FILENAME GT 
            {
              Object RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String path = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Include",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // RepI ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RepI",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // RepI ::= Include RepI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RepI",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= RepI Decl ReP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

